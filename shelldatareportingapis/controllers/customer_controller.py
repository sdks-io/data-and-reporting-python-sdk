# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.configuration import Server
from shelldatareportingapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shelldatareportingapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shelldatareportingapis.models.logged_in_user_res import LoggedInUserRes
from shelldatareportingapis.models.payer_res import PayerRes
from shelldatareportingapis.models.customer_res import CustomerRes
from shelldatareportingapis.models.account_res import AccountRes
from shelldatareportingapis.models.card_type_res import CardTypeRes
from shelldatareportingapis.models.card_group_res import CardGroupRes
from shelldatareportingapis.models.audit_response import AuditResponse
from shelldatareportingapis.models.customer_price_list_res import CustomerPriceListRes
from shelldatareportingapis.exceptions.error_object_exception import ErrorObjectException


class CustomerController(BaseController):

    """A Controller to access Endpoints in the shelldatareportingapis API."""
    def __init__(self, config):
        super(CustomerController, self).__init__(config)

    def user_loggedinuser(self,
                          request_id,
                          body):
        """Does a POST request to /user-management/v1/loggedinuser.

        This operation allows querying the user data of the logged in user.
        This operation should be called only after successful authentication
        of the end user in client application. This operation will return the
        user access details such as payers and/or accounts. 
        This operation will also validate that logged in user has access to
        the requested operation, on failure it will return HasAPIAccess flag
        as false in the response. 

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (LoggedInUserReq): The request body parameter.

        Returns:
            LoggedInUserRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/user-management/v1/loggedinuser')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LoggedInUserRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def customerpayers(self,
                       request_id,
                       body):
        """Does a POST request to /customer-management/v1/payers.

        This API allows querying the payer accounts details from the Shell
        Cards
        Platform. It provides flexible search criteria for searching payer
        information and supports paging. 
        Paging is applicable only when all the
        payers passed in the input are from the same ColCo. 
        However, paging will
        be ignored and the API will return all the matching data by merging the
        data queried from each ColCo when payers passed in the input are from
        multiple ColCos.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (PayerReq): The request body parameter.

        Returns:
            PayerRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/payers')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PayerRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def customerdetail(self,
                       request_id,
                       body):
        """Does a POST request to /customer-management/v1/customer.

        This API allows querying the card delivery addresses of a given
        account from the Shell Cards Platform. Only active delivery addresses
        will be returned.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CustomerReq): The request body parameter.

        Returns:
            CustomerRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/customer')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomerRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def post_card_accounts(self,
                           request_id,
                           body):
        """Does a POST request to /customer-management/v1/accounts.

        This API allows querying the customer account details from the Shell
        Cards Platform. It provides a flexible search criterion and supports
        pagination.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (AccountReq): The request body parameter.

        Returns:
            AccountRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/accounts')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def customercardtypev(self,
                          request_id,
                          body):
        """Does a POST request to /customer-management/v1/cardtype.

        This API provides allows querying the active card types that are
        associated to the given account. 

        The API returns the card type configurations, purchase categories
        associated with the card type and the card type restriction limits.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardTypeReq): The request body parameter.

        Returns:
            CardTypeRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/cardtype')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardTypeRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def cardgroups(self,
                   request_id,
                   body):
        """Does a POST request to /customer-management/v1/cardgroups.

        This API allows querying the card group details from the Shell Cards
        Platform. It provides flexible search criteria and supports paging. 
        When the account is not passed in the input and card group type is
        configured as
        â€˜Verticalâ€™ in the cards platform, this API will return all card
        groups from 
        the payer as well as from all the accounts under the payer. 
        When the account is not passed in the input and card group type is
        configured as
        â€˜Horizontalâ€™ in cards platform, this API will return all card
        groups
        configured directly under the payer.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardGroupReq): The request body parameter.

        Returns:
            CardGroupRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/cardgroups')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardGroupRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def audit_report(self,
                     request_id,
                     body=None):
        """Does a POST request to /customer-management/v1/auditreport.

        This operation allows users to fetch audit data of account or card
        operations performed by users of a given customer
        The audit data includes details of below API operations
        * Order Card 
        * Create Card Group 
        * PIN reminder 
        * Move Cards 
        * Update Card Status 
        * Update Card Group 
        * Auto renew 
        * Bulk card order 
        * Bulk card block 
        * Bulk Card Order (Multi Account) 
        * BCOSummary 
        * BCOMultiAccountSummary 
        * BCBSummary 
        * Mobile Payment Registration 
        * Fund Transfer (Scheduled & Realtime) 
        * Delivery Address Update.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (AuditReq, optional): request body

        Returns:
            AuditResponse: Response from the API. The http status code 200 and
                the Error.Code "0000" in the response body would indicate the
                API call is successful. The http status code 200 with Error
                Code other than "0000" in the response body would indicate
                there is a failure in the API call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/auditreport')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AuditResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def customer_price_list(self,
                            request_id,
                            body=None):
        """Does a POST request to /customer-management/v1/pricelist.

        - This operation fetches the International and National Price List and
        discount values set on pump prices & List Prices
        - It allows searching price list and discount values set on pump
        prices that are applicable for a given customer 
        **Note**: Accounts with cancelled status will not be considered for
        this operation for the configured 
        - When the search is based on customer specific price list then the
        customer price list is returned based on the associated pricing
        customer.
        - The discount values set on pump prices, which are returned by the
        operation are always customer specific values based on the customer
        associated price rules.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CustomerPriceListReq, optional): Customerdetails request body

        Returns:
            CustomerPriceListRes: Response from the API. List of fuel cards.
                The http status code 200 and the Error.Code "0000" in the
                response body would indicate the API call is successful. The
                http status code 200 with Error Code other than "0000" in the
                response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/customer-management/v1/pricelist')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomerPriceListRes.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', ErrorObjectException)
        ).execute()
