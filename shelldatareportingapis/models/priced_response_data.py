# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper


class PricedResponseData(object):

    """Implementation of the 'PricedResponseData' model.

    Attributes:
        account_name (str): Name of the account
        account_id (int): Account Id (i.e. Customer Id of the Sub Account in
            GFN) of the selected account.
        account_number (str): AccountNumber of the selected account.
        account_short_name (str): Nick name of the account
        additional_1 (str): Addtional SerialId or endpoint Id
        additional_2 (str): Addtional SerialId or endpoint Id
        additional_3 (str): Addtional SerialId or endpoint Id
        additional_4 (str): Addtional SerialId or endpoint Id
        allow_clearing (str): Allow clearings
        authorisation_code (int): Autorization code
        transaction_status (str): Status of the transaction
        driver_name (str): Driver Name of Card record
        card_expiry_period (int): Expiry period of the card
        card_expiry (str): Card Expiry Date
        card_group_id (int): Card Group Code
        card_group_name (str): Group nmae of the card
        issuer_code (int): Issuer code
        card_pan (str): Full Card PAN
        release_code (int): Release code
        card_sequence_number (int): Sequesnce number of the card
        card_type (str): Type of card
        col_co_code (str): Collecting Company Code (Shell Code) of the
            selected payer.
        unit_discount_invoice_currency (float): Unit discount Invoice currency
        col_co_exchange_rate (float): Colco exchange rate
        invoice_currency_symbol (str): Currency symbol on which the invoice
            was raised
        correction_flag (bool): Is there any correction
        crm_number (float): CRM number
        customer_country (str): Customer country
        customer_currency_code (str): Curreny which customer uses to transact.
        customer_currency_symbol (str): Custome currency symbol
        rebateon_net_amount_in_customer_currency (float): Rebate on net amount
            in customer currency
        effective_discount_in_customer_currency (float): Effective discount in
            customers currency
        effective_unit_discount_in_customer_currency (float): effectiive unit
            discount in customers currency
        unit_price_in_invoice_currency (float): Unitpricing in invoice currency
        invoice_tax (float): Invoice tax
        invoice_gross_amount (float): Invoice amount befor tax
        invoice_net_amount (float): Invoice amount after tax
        va_ton_net_amount_in_customer_currency (float): Vat on net amount in
            customer currency
        customer_retail_price_unit_gross (float): Customer retail unit price
            before tax
        customer_retail_value_total_gross (float): Total Customer retail value
            before tax
        customer_retail_value_total_net (float): Total customer retail value
            after tax
        transaction_type_description (float): Trasaction type description
        rebateon_net_amount_in_transaction_currency (float): Rebate give to
            net amountin transaction currency that is used
        effective_discount_in_trx_currency (float): Currency used to
            giveEffective discount on transactions
        del_co_to_col_co_exchange_rate (int): Exchange rate between Delco and
            Colco
        cards (List[int]): The model property of type List[int].
        unit_discount_transaction_currency (float): Currency used forto
            provide unit Transaction discount
        transaction_gross_amount (float): Transactional amount before tax
        transaction_net_amount (float): Transaction net amount after tax
        transaction_tax (float): Transaction tax
        va_ton_net_amount (float): Transactinal tax rates
        delco_list_price_unit_net (float): Priv
        delco_retail_price_unit_gross (float): Delco retail price per unit
            before tax
        unit_price_in_transaction_currency (float): Delco retail price per
            unit after tax
        delco_retail_price_unit_net (float): Delco retail price per unit
        delco_retail_value_total_gross (float): Delco retail price before tax
        delco_retail_value_total_net (float): Delco per unit price after tax
        transaction_currency_symbol (str): Currency used for transaction.
        discount_type (str): Type of discount available
        dispute_status (bool): Is there any dispute status?True or False
        is_shell_site (bool): Is it a shell sites?True or False
        fleet_id_input (str): Fleet identifier
        incoming_product_code (int): In coming product code
        posting_date (str): Date of Posting
        posting_time (str): Time whern posting happened
        product_code (int): Product Code - 21 Unleaded - High octane,22
            Unleaded - Medium octane,23 Unleaded - Low octane,24 Unleaded
            Environmental
        product_name (str): Name of the product
        product_group_id (int): Id of the product to which group it belongs
        incoming_currency_code (str): In coming currecncy code
        incoming_site_description (str): In coming Site description
        location (str): Location of the Shell site
        site_name (str): Shell site name
        site_code (int): Shell site code
        incoming_site_number (int): In coming site number
        invoice_currency_code (str): Currency code on which the invoice is
            raised
        invoice_date (str): Date on which the invoice was raised
        invoice_number (float): Invoice number
        fuel_product (bool): Is it a fuel product? True or False
        vat_applicable (str): Is VAT applicable?Y or N
        payer_name (str): Name of the payer
        payer_number (str): Payer account number
        parent_customer_number (str): Parent account number of the payer
        payer_group (str): The group which the payer belongs to
        payer_group_name (str): Name of the group to which the payer belongs
            to.
        check_digit (int): Check digit
        net_invoice_indicator (str): After tax net invoice number
        delco_code (int): Delco code
        network_code (int): Network  code of the payer
        purchased_in_country (str): Country of purchase
        site_country (str): Country where the site exists
        vat_country (str): Country where VAT is applicable
        delco_name (str): Name of the delivery company
        network (str): Network of the Delivery company
        odometer_input (int): Odometet input
        original_sales_item_id (str): Original item identifier for sales
        fleet_id_description (str): Fleet identifier description
        parent_customer_id (int): Identifier of parent customer
        pin_indicator (str): PIN indicator
        product_group_name (str): Name og the group the product belongs to
        purchased_in_country_code (str): The countroy code where the purchase
            was made
        quantity (float): Quantity of the product
        rebate_rate (float): Rebate rate if any
        receipt_number (int): Reciept number
        refund_flag (PricedTransactionRespV2RefundFlagEnum): The model
            property of type PricedTransactionRespV2RefundFlagEnum.
        site_group_id (int): Group identifier for the site
        site_group_name (str): Name of the Site group
        latitude (float): Latitude of the site
        longitude (float): Longitude of the site
        del_co_exchange_rate (float): Delivery company exchange rate
        euro_rebate_amount (float): Rebate amount in Euros
        net_euro_amount (float): Net amount in Euros
        euro_vat_amount (float): Vat amount in Euros
        parent_customer_name (str): Customers parent name
        is_invoiced (bool): Is invoice raised
        transaction_currency_code (str): Transaction currency code
        credit_debit_code (str): Is it Credit or debit C for credit D for Debit
        transaction_date (str): Date of transaction
        transaction_time (str): Time of transaction
        transaction_item_id (str): Identifier of the Iem in transaction
        trn_identifier (str): Transaction identifier
        mtype (str): Transaction type for Delco
        transaction_line (int): The model property of type int.
        transaction_type (str): Transaction type Colco
        utc_offset (str): Leaving country
        vat_category (str): To which category and counry does the  VAT come
            under
        vat_rate (float): VAT rate
        vehicle_registration (str): Vehicle registration number
        is_cancelled (str): Check if the pruchase is cancelled
        col_co_gross_amount (float): Gross amount from Colco
        col_co_net_amount (float): Net amount from Colco
        col_co_vat_amount (float): Colco VAT amount
        original_currency_symbol (str): Original currency code
        original_currency_code (str): Original currency code
        original_vat_amount (float): Original VAT amount
        emboss_text (str): Comapany name embosses in text
        original_exchange_rate (float): Orginal exchange rate
        original_transaction_item_invoice_date (str): Original treansaction
            date
        fee_type_id (int): Fee type identifier
        line_item_description (bool): Line item identifier of the product
        fee_rule_description (str): Fee rule description
        frequency (int): Frequency of transaction
        fee_rule_id (int): Fee rule identifier
        system_entry_date (str): Entry date in the system
        system_entry_time (str): Entry time in the system
        is_manual (str): Checking if its manual
        original_transaction_item_id (str): Is it manual
        original_transaction_item_invoice_number (int): Original invoice
            transaction number
        original_transaction_item_invoice_id (int): Original Invoice
            transaction Identifier
        payer_short_name (str): Payers short name
        reverse_charge (str): Is reverse charge?
        original_gross_amount (float): Original gross amount
        original_net_amount (float): Original Net amount
        unit_of_measure (str): Unit of measure
        road_type (str): Type of road
        customer_country_iso_code (str): Customer country ISO Code
        ev_operator (str): EvOperator Name
        ev_serial_id (str): Ev Operator identifier
        ev_charge_point_serial (str): EV Charging point iserial identifier
        ev_charge_point_connector_type (int): Ev chariging connector type
        ev_charge_point_connector_type_description (str): EV charging point
            connector type description
        ev_charge_duration (str): Ev charging Duration
        ev_charge_start_date (str): EvCharging start Date
        ev_charge_start_time (str): EvCharging start time
        ev_charge_end_date (str): EvCharging End Date
        ev_charge_end_time (str): EvCharging End time
        hosting_collecting_company_number (int): The model property of type
            int.
        transaction_id (float): The model property of type float.
        fuel_only (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'AccountName',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "account_short_name": 'AccountShortName',
        "additional_1": 'Additional1',
        "additional_2": 'Additional2',
        "additional_3": 'Additional3',
        "additional_4": 'Additional4',
        "allow_clearing": 'AllowClearing',
        "authorisation_code": 'AuthorisationCode',
        "transaction_status": 'TransactionStatus',
        "driver_name": 'DriverName',
        "card_expiry_period": 'CardExpiryPeriod',
        "card_expiry": 'CardExpiry',
        "card_group_id": 'CardGroupId',
        "card_group_name": 'CardGroupName',
        "issuer_code": 'IssuerCode',
        "card_pan": 'CardPAN',
        "release_code": 'ReleaseCode',
        "card_sequence_number": 'CardSequenceNumber',
        "card_type": 'CardType',
        "col_co_code": 'ColCoCode',
        "unit_discount_invoice_currency": 'UnitDiscountInvoiceCurrency',
        "col_co_exchange_rate": 'ColCoExchangeRate',
        "invoice_currency_symbol": 'InvoiceCurrencySymbol',
        "correction_flag": 'CorrectionFlag',
        "crm_number": 'CRMNumber',
        "customer_country": 'CustomerCountry',
        "customer_currency_code": 'CustomerCurrencyCode',
        "customer_currency_symbol": 'CustomerCurrencySymbol',
        "rebateon_net_amount_in_customer_currency": 'RebateonNetAmountInCustomerCurrency',
        "effective_discount_in_customer_currency": 'EffectiveDiscountInCustomerCurrency',
        "effective_unit_discount_in_customer_currency": 'EffectiveUnitDiscountInCustomerCurrency',
        "unit_price_in_invoice_currency": 'UnitPriceInInvoiceCurrency',
        "invoice_tax": 'InvoiceTax',
        "invoice_gross_amount": 'InvoiceGrossAmount',
        "invoice_net_amount": 'InvoiceNetAmount',
        "va_ton_net_amount_in_customer_currency": 'VATonNetAmountInCustomerCurrency',
        "customer_retail_price_unit_gross": 'CustomerRetailPriceUnitGross',
        "customer_retail_value_total_gross": 'CustomerRetailValueTotalGross',
        "customer_retail_value_total_net": 'CustomerRetailValueTotalNet',
        "transaction_type_description": 'TransactionTypeDescription',
        "rebateon_net_amount_in_transaction_currency": 'RebateonNetAmountInTransactionCurrency',
        "effective_discount_in_trx_currency": 'EffectiveDiscountInTrxCurrency',
        "del_co_to_col_co_exchange_rate": 'DelCoToColCoExchangeRate',
        "cards": 'Cards',
        "unit_discount_transaction_currency": 'UnitDiscountTransactionCurrency',
        "transaction_gross_amount": 'TransactionGrossAmount',
        "transaction_net_amount": 'TransactionNetAmount',
        "transaction_tax": 'TransactionTax',
        "va_ton_net_amount": 'VATonNetAmount',
        "delco_list_price_unit_net": 'DelcoListPriceUnitNet',
        "delco_retail_price_unit_gross": 'DelcoRetailPriceUnitGross',
        "unit_price_in_transaction_currency": 'UnitPriceInTransactionCurrency',
        "delco_retail_price_unit_net": 'DelcoRetailPriceUnitNet',
        "delco_retail_value_total_gross": 'DelcoRetailValueTotalGross',
        "delco_retail_value_total_net": 'DelcoRetailValueTotalNet',
        "transaction_currency_symbol": 'TransactionCurrencySymbol',
        "discount_type": 'DiscountType',
        "dispute_status": 'DisputeStatus',
        "is_shell_site": 'IsShellSite',
        "fleet_id_input": 'FleetIdInput',
        "incoming_product_code": 'IncomingProductCode',
        "posting_date": 'PostingDate',
        "posting_time": 'PostingTime',
        "product_code": 'ProductCode',
        "product_name": 'ProductName',
        "product_group_id": 'ProductGroupId',
        "incoming_currency_code": 'IncomingCurrencyCode',
        "incoming_site_description": 'IncomingSiteDescription',
        "location": 'Location',
        "site_name": 'SiteName',
        "site_code": 'SiteCode',
        "incoming_site_number": 'IncomingSiteNumber',
        "invoice_currency_code": 'InvoiceCurrencyCode',
        "invoice_date": 'InvoiceDate',
        "invoice_number": 'InvoiceNumber',
        "fuel_product": 'FuelProduct',
        "vat_applicable": 'VATApplicable',
        "payer_name": 'PayerName',
        "payer_number": 'PayerNumber',
        "parent_customer_number": 'ParentCustomerNumber',
        "payer_group": 'PayerGroup',
        "payer_group_name": 'PayerGroupName',
        "check_digit": 'CheckDigit',
        "net_invoice_indicator": 'NetInvoiceIndicator',
        "delco_code": 'DelcoCode',
        "network_code": 'NetworkCode',
        "purchased_in_country": 'PurchasedInCountry',
        "site_country": 'SiteCountry',
        "vat_country": 'VATCountry',
        "delco_name": 'DelcoName',
        "network": 'Network',
        "odometer_input": 'OdometerInput',
        "original_sales_item_id": 'OriginalSalesItemId',
        "fleet_id_description": 'FleetIDDescription',
        "parent_customer_id": 'ParentCustomerId',
        "pin_indicator": 'PINIndicator',
        "product_group_name": 'ProductGroupName',
        "purchased_in_country_code": 'PurchasedInCountryCode',
        "quantity": 'Quantity',
        "rebate_rate": 'RebateRate',
        "receipt_number": 'ReceiptNumber',
        "refund_flag": 'RefundFlag',
        "site_group_id": 'SiteGroupId',
        "site_group_name": 'SiteGroupName',
        "latitude": 'Latitude',
        "longitude": 'Longitude',
        "del_co_exchange_rate": 'DelCoExchangeRate',
        "euro_rebate_amount": 'EuroRebateAmount',
        "net_euro_amount": 'NetEuroAmount',
        "euro_vat_amount": 'EuroVATAmount',
        "parent_customer_name": 'ParentCustomerName',
        "is_invoiced": 'IsInvoiced',
        "transaction_currency_code": 'TransactionCurrencyCode',
        "credit_debit_code": 'CreditDebitCode',
        "transaction_date": 'TransactionDate',
        "transaction_time": 'TransactionTime',
        "transaction_item_id": 'TransactionItemId',
        "trn_identifier": 'TrnIdentifier',
        "mtype": 'Type',
        "transaction_line": 'TransactionLine',
        "transaction_type": 'TransactionType',
        "utc_offset": 'UTCOffset',
        "vat_category": 'VATCategory',
        "vat_rate": 'VATRate',
        "vehicle_registration": 'VehicleRegistration',
        "is_cancelled": 'IsCancelled',
        "col_co_gross_amount": 'ColCoGrossAmount',
        "col_co_net_amount": 'ColCoNetAmount',
        "col_co_vat_amount": 'ColCoVATAmount',
        "original_currency_symbol": 'OriginalCurrencySymbol',
        "original_currency_code": 'OriginalCurrencyCode',
        "original_vat_amount": 'OriginalVATAmount',
        "emboss_text": 'EmbossText',
        "original_exchange_rate": 'OriginalExchangeRate',
        "original_transaction_item_invoice_date": 'OriginalTransactionItemInvoiceDate',
        "fee_type_id": 'FeeTypeId',
        "line_item_description": 'LineItemDescription',
        "fee_rule_description": 'FeeRuleDescription',
        "frequency": 'Frequency',
        "fee_rule_id": 'FeeRuleId',
        "system_entry_date": 'SystemEntryDate',
        "system_entry_time": 'SystemEntryTime',
        "is_manual": 'IsManual',
        "original_transaction_item_id": 'OriginalTransactionItemId',
        "original_transaction_item_invoice_number": 'OriginalTransactionItemInvoiceNumber',
        "original_transaction_item_invoice_id": 'OriginalTransactionItemInvoiceId',
        "payer_short_name": 'PayerShortName',
        "reverse_charge": 'ReverseCharge',
        "original_gross_amount": 'OriginalGrossAmount',
        "original_net_amount": 'OriginalNetAmount',
        "unit_of_measure": 'UnitOfMeasure',
        "road_type": 'RoadType',
        "customer_country_iso_code": 'CustomerCountryIsoCode',
        "ev_operator": 'EVOperator',
        "ev_serial_id": 'EVSerialId',
        "ev_charge_point_serial": 'EVChargePointSerial',
        "ev_charge_point_connector_type": 'EVChargePointConnectorType',
        "ev_charge_point_connector_type_description": 'EVChargePointConnectorTypeDescription',
        "ev_charge_duration": 'EVChargeDuration',
        "ev_charge_start_date": 'EVChargeStartDate',
        "ev_charge_start_time": 'EVChargeStartTime',
        "ev_charge_end_date": 'EVChargeEndDate',
        "ev_charge_end_time": 'EVChargeEndTime',
        "hosting_collecting_company_number": 'HostingCollectingCompanyNumber',
        "transaction_id": 'TransactionId',
        "fuel_only": 'FuelOnly'
    }

    _optionals = [
        'account_name',
        'account_id',
        'account_number',
        'account_short_name',
        'additional_1',
        'additional_2',
        'additional_3',
        'additional_4',
        'allow_clearing',
        'authorisation_code',
        'transaction_status',
        'driver_name',
        'card_expiry_period',
        'card_expiry',
        'card_group_id',
        'card_group_name',
        'issuer_code',
        'card_pan',
        'release_code',
        'card_sequence_number',
        'card_type',
        'col_co_code',
        'unit_discount_invoice_currency',
        'col_co_exchange_rate',
        'invoice_currency_symbol',
        'correction_flag',
        'crm_number',
        'customer_country',
        'customer_currency_code',
        'customer_currency_symbol',
        'rebateon_net_amount_in_customer_currency',
        'effective_discount_in_customer_currency',
        'effective_unit_discount_in_customer_currency',
        'unit_price_in_invoice_currency',
        'invoice_tax',
        'invoice_gross_amount',
        'invoice_net_amount',
        'va_ton_net_amount_in_customer_currency',
        'customer_retail_price_unit_gross',
        'customer_retail_value_total_gross',
        'customer_retail_value_total_net',
        'transaction_type_description',
        'rebateon_net_amount_in_transaction_currency',
        'effective_discount_in_trx_currency',
        'del_co_to_col_co_exchange_rate',
        'cards',
        'unit_discount_transaction_currency',
        'transaction_gross_amount',
        'transaction_net_amount',
        'transaction_tax',
        'va_ton_net_amount',
        'delco_list_price_unit_net',
        'delco_retail_price_unit_gross',
        'unit_price_in_transaction_currency',
        'delco_retail_price_unit_net',
        'delco_retail_value_total_gross',
        'delco_retail_value_total_net',
        'transaction_currency_symbol',
        'discount_type',
        'dispute_status',
        'is_shell_site',
        'fleet_id_input',
        'incoming_product_code',
        'posting_date',
        'posting_time',
        'product_code',
        'product_name',
        'product_group_id',
        'incoming_currency_code',
        'incoming_site_description',
        'location',
        'site_name',
        'site_code',
        'incoming_site_number',
        'invoice_currency_code',
        'invoice_date',
        'invoice_number',
        'fuel_product',
        'vat_applicable',
        'payer_name',
        'payer_number',
        'parent_customer_number',
        'payer_group',
        'payer_group_name',
        'check_digit',
        'net_invoice_indicator',
        'delco_code',
        'network_code',
        'purchased_in_country',
        'site_country',
        'vat_country',
        'delco_name',
        'network',
        'odometer_input',
        'original_sales_item_id',
        'fleet_id_description',
        'parent_customer_id',
        'pin_indicator',
        'product_group_name',
        'purchased_in_country_code',
        'quantity',
        'rebate_rate',
        'receipt_number',
        'refund_flag',
        'site_group_id',
        'site_group_name',
        'latitude',
        'longitude',
        'del_co_exchange_rate',
        'euro_rebate_amount',
        'net_euro_amount',
        'euro_vat_amount',
        'parent_customer_name',
        'is_invoiced',
        'transaction_currency_code',
        'credit_debit_code',
        'transaction_date',
        'transaction_time',
        'transaction_item_id',
        'trn_identifier',
        'mtype',
        'transaction_line',
        'transaction_type',
        'utc_offset',
        'vat_category',
        'vat_rate',
        'vehicle_registration',
        'is_cancelled',
        'col_co_gross_amount',
        'col_co_net_amount',
        'col_co_vat_amount',
        'original_currency_symbol',
        'original_currency_code',
        'original_vat_amount',
        'emboss_text',
        'original_exchange_rate',
        'original_transaction_item_invoice_date',
        'fee_type_id',
        'line_item_description',
        'fee_rule_description',
        'frequency',
        'fee_rule_id',
        'system_entry_date',
        'system_entry_time',
        'is_manual',
        'original_transaction_item_id',
        'original_transaction_item_invoice_number',
        'original_transaction_item_invoice_id',
        'payer_short_name',
        'reverse_charge',
        'original_gross_amount',
        'original_net_amount',
        'unit_of_measure',
        'road_type',
        'customer_country_iso_code',
        'ev_operator',
        'ev_serial_id',
        'ev_charge_point_serial',
        'ev_charge_point_connector_type',
        'ev_charge_point_connector_type_description',
        'ev_charge_duration',
        'ev_charge_start_date',
        'ev_charge_start_time',
        'ev_charge_end_date',
        'ev_charge_end_time',
        'hosting_collecting_company_number',
        'transaction_id',
        'fuel_only',
    ]

    _nullables = [
        'account_name',
        'account_id',
        'account_number',
        'account_short_name',
        'additional_1',
        'additional_2',
        'additional_3',
        'additional_4',
        'allow_clearing',
        'authorisation_code',
        'transaction_status',
        'driver_name',
        'card_expiry_period',
        'card_expiry',
        'card_group_id',
        'card_group_name',
        'issuer_code',
        'card_pan',
        'release_code',
        'card_sequence_number',
        'card_type',
        'col_co_code',
        'unit_discount_invoice_currency',
        'invoice_currency_symbol',
        'correction_flag',
        'crm_number',
        'customer_country',
        'customer_currency_code',
        'customer_currency_symbol',
        'rebateon_net_amount_in_customer_currency',
        'effective_discount_in_customer_currency',
        'effective_unit_discount_in_customer_currency',
        'unit_price_in_invoice_currency',
        'invoice_tax',
        'invoice_gross_amount',
        'invoice_net_amount',
        'va_ton_net_amount_in_customer_currency',
        'customer_retail_price_unit_gross',
        'customer_retail_value_total_gross',
        'customer_retail_value_total_net',
        'transaction_type_description',
        'rebateon_net_amount_in_transaction_currency',
        'effective_discount_in_trx_currency',
        'del_co_to_col_co_exchange_rate',
        'unit_discount_transaction_currency',
        'transaction_gross_amount',
        'transaction_net_amount',
        'transaction_tax',
        'va_ton_net_amount',
        'delco_list_price_unit_net',
        'delco_retail_price_unit_gross',
        'unit_price_in_transaction_currency',
        'delco_retail_price_unit_net',
        'delco_retail_value_total_gross',
        'delco_retail_value_total_net',
        'transaction_currency_symbol',
        'discount_type',
        'dispute_status',
        'fleet_id_input',
        'incoming_product_code',
        'posting_date',
        'posting_time',
        'product_code',
        'product_name',
        'product_group_id',
        'incoming_currency_code',
        'incoming_site_description',
        'location',
        'site_name',
        'site_code',
        'incoming_site_number',
        'invoice_currency_code',
        'invoice_date',
        'invoice_number',
        'fuel_product',
        'vat_applicable',
        'payer_name',
        'payer_number',
        'parent_customer_number',
        'payer_group',
        'payer_group_name',
        'check_digit',
        'net_invoice_indicator',
        'delco_code',
        'network_code',
        'purchased_in_country',
        'site_country',
        'vat_country',
        'delco_name',
        'network',
        'odometer_input',
        'original_sales_item_id',
        'fleet_id_description',
        'parent_customer_id',
        'pin_indicator',
        'product_group_name',
        'purchased_in_country_code',
        'quantity',
        'rebate_rate',
        'receipt_number',
        'site_group_id',
        'site_group_name',
        'latitude',
        'longitude',
        'del_co_exchange_rate',
        'euro_rebate_amount',
        'net_euro_amount',
        'euro_vat_amount',
        'parent_customer_name',
        'is_invoiced',
        'transaction_currency_code',
        'credit_debit_code',
        'transaction_date',
        'transaction_time',
        'transaction_item_id',
        'trn_identifier',
        'mtype',
        'transaction_line',
        'transaction_type',
        'utc_offset',
        'vat_category',
        'vat_rate',
        'vehicle_registration',
        'is_cancelled',
        'col_co_gross_amount',
        'col_co_net_amount',
        'col_co_vat_amount',
        'original_currency_symbol',
        'original_currency_code',
        'original_vat_amount',
        'emboss_text',
        'original_exchange_rate',
        'original_transaction_item_invoice_date',
        'fee_type_id',
        'line_item_description',
        'fee_rule_description',
        'frequency',
        'fee_rule_id',
        'system_entry_date',
        'system_entry_time',
        'is_manual',
        'original_transaction_item_id',
        'original_transaction_item_invoice_number',
        'original_transaction_item_invoice_id',
        'payer_short_name',
        'reverse_charge',
        'original_gross_amount',
        'original_net_amount',
        'unit_of_measure',
        'road_type',
        'customer_country_iso_code',
        'ev_operator',
        'ev_serial_id',
        'ev_charge_point_serial',
        'ev_charge_point_connector_type',
        'ev_charge_point_connector_type_description',
        'ev_charge_duration',
        'ev_charge_start_date',
        'ev_charge_start_time',
        'ev_charge_end_date',
        'ev_charge_end_time',
        'hosting_collecting_company_number',
        'transaction_id',
        'fuel_only',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 account_short_name=APIHelper.SKIP,
                 additional_1=APIHelper.SKIP,
                 additional_2=APIHelper.SKIP,
                 additional_3=APIHelper.SKIP,
                 additional_4=APIHelper.SKIP,
                 allow_clearing=APIHelper.SKIP,
                 authorisation_code=APIHelper.SKIP,
                 transaction_status=APIHelper.SKIP,
                 driver_name=APIHelper.SKIP,
                 card_expiry_period=APIHelper.SKIP,
                 card_expiry=APIHelper.SKIP,
                 card_group_id=APIHelper.SKIP,
                 card_group_name=APIHelper.SKIP,
                 issuer_code=APIHelper.SKIP,
                 card_pan=APIHelper.SKIP,
                 release_code=APIHelper.SKIP,
                 card_sequence_number=APIHelper.SKIP,
                 card_type=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 unit_discount_invoice_currency=APIHelper.SKIP,
                 col_co_exchange_rate=APIHelper.SKIP,
                 invoice_currency_symbol=APIHelper.SKIP,
                 correction_flag=APIHelper.SKIP,
                 crm_number=APIHelper.SKIP,
                 customer_country=APIHelper.SKIP,
                 customer_currency_code=APIHelper.SKIP,
                 customer_currency_symbol=APIHelper.SKIP,
                 rebateon_net_amount_in_customer_currency=APIHelper.SKIP,
                 effective_discount_in_customer_currency=APIHelper.SKIP,
                 effective_unit_discount_in_customer_currency=APIHelper.SKIP,
                 unit_price_in_invoice_currency=APIHelper.SKIP,
                 invoice_tax=APIHelper.SKIP,
                 invoice_gross_amount=APIHelper.SKIP,
                 invoice_net_amount=APIHelper.SKIP,
                 va_ton_net_amount_in_customer_currency=APIHelper.SKIP,
                 customer_retail_price_unit_gross=APIHelper.SKIP,
                 customer_retail_value_total_gross=APIHelper.SKIP,
                 customer_retail_value_total_net=APIHelper.SKIP,
                 transaction_type_description=APIHelper.SKIP,
                 rebateon_net_amount_in_transaction_currency=APIHelper.SKIP,
                 effective_discount_in_trx_currency=APIHelper.SKIP,
                 del_co_to_col_co_exchange_rate=APIHelper.SKIP,
                 cards=APIHelper.SKIP,
                 unit_discount_transaction_currency=APIHelper.SKIP,
                 transaction_gross_amount=APIHelper.SKIP,
                 transaction_net_amount=APIHelper.SKIP,
                 transaction_tax=APIHelper.SKIP,
                 va_ton_net_amount=APIHelper.SKIP,
                 delco_list_price_unit_net=APIHelper.SKIP,
                 delco_retail_price_unit_gross=APIHelper.SKIP,
                 unit_price_in_transaction_currency=APIHelper.SKIP,
                 delco_retail_price_unit_net=APIHelper.SKIP,
                 delco_retail_value_total_gross=APIHelper.SKIP,
                 delco_retail_value_total_net=APIHelper.SKIP,
                 transaction_currency_symbol=APIHelper.SKIP,
                 discount_type=APIHelper.SKIP,
                 dispute_status=False,
                 is_shell_site=False,
                 fleet_id_input=APIHelper.SKIP,
                 incoming_product_code=APIHelper.SKIP,
                 posting_date=APIHelper.SKIP,
                 posting_time=APIHelper.SKIP,
                 product_code=APIHelper.SKIP,
                 product_name=APIHelper.SKIP,
                 product_group_id=APIHelper.SKIP,
                 incoming_currency_code=APIHelper.SKIP,
                 incoming_site_description=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 site_name=APIHelper.SKIP,
                 site_code=APIHelper.SKIP,
                 incoming_site_number=APIHelper.SKIP,
                 invoice_currency_code=APIHelper.SKIP,
                 invoice_date=APIHelper.SKIP,
                 invoice_number=APIHelper.SKIP,
                 fuel_product=APIHelper.SKIP,
                 vat_applicable=APIHelper.SKIP,
                 payer_name=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 parent_customer_number=APIHelper.SKIP,
                 payer_group=APIHelper.SKIP,
                 payer_group_name=APIHelper.SKIP,
                 check_digit=APIHelper.SKIP,
                 net_invoice_indicator=APIHelper.SKIP,
                 delco_code=APIHelper.SKIP,
                 network_code=APIHelper.SKIP,
                 purchased_in_country=APIHelper.SKIP,
                 site_country=APIHelper.SKIP,
                 vat_country=APIHelper.SKIP,
                 delco_name=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 odometer_input=APIHelper.SKIP,
                 original_sales_item_id=APIHelper.SKIP,
                 fleet_id_description=APIHelper.SKIP,
                 parent_customer_id=APIHelper.SKIP,
                 pin_indicator=APIHelper.SKIP,
                 product_group_name=APIHelper.SKIP,
                 purchased_in_country_code=APIHelper.SKIP,
                 quantity=APIHelper.SKIP,
                 rebate_rate=APIHelper.SKIP,
                 receipt_number=APIHelper.SKIP,
                 refund_flag=APIHelper.SKIP,
                 site_group_id=APIHelper.SKIP,
                 site_group_name=APIHelper.SKIP,
                 latitude=APIHelper.SKIP,
                 longitude=APIHelper.SKIP,
                 del_co_exchange_rate=APIHelper.SKIP,
                 euro_rebate_amount=APIHelper.SKIP,
                 net_euro_amount=APIHelper.SKIP,
                 euro_vat_amount=APIHelper.SKIP,
                 parent_customer_name=APIHelper.SKIP,
                 is_invoiced=False,
                 transaction_currency_code=APIHelper.SKIP,
                 credit_debit_code=APIHelper.SKIP,
                 transaction_date=APIHelper.SKIP,
                 transaction_time=APIHelper.SKIP,
                 transaction_item_id=APIHelper.SKIP,
                 trn_identifier=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 transaction_line=APIHelper.SKIP,
                 transaction_type=APIHelper.SKIP,
                 utc_offset=APIHelper.SKIP,
                 vat_category=APIHelper.SKIP,
                 vat_rate=APIHelper.SKIP,
                 vehicle_registration=APIHelper.SKIP,
                 is_cancelled=APIHelper.SKIP,
                 col_co_gross_amount=APIHelper.SKIP,
                 col_co_net_amount=APIHelper.SKIP,
                 col_co_vat_amount=APIHelper.SKIP,
                 original_currency_symbol=APIHelper.SKIP,
                 original_currency_code=APIHelper.SKIP,
                 original_vat_amount=APIHelper.SKIP,
                 emboss_text=APIHelper.SKIP,
                 original_exchange_rate=APIHelper.SKIP,
                 original_transaction_item_invoice_date=APIHelper.SKIP,
                 fee_type_id=APIHelper.SKIP,
                 line_item_description=False,
                 fee_rule_description=APIHelper.SKIP,
                 frequency=APIHelper.SKIP,
                 fee_rule_id=APIHelper.SKIP,
                 system_entry_date=APIHelper.SKIP,
                 system_entry_time=APIHelper.SKIP,
                 is_manual=APIHelper.SKIP,
                 original_transaction_item_id=APIHelper.SKIP,
                 original_transaction_item_invoice_number=APIHelper.SKIP,
                 original_transaction_item_invoice_id=APIHelper.SKIP,
                 payer_short_name=APIHelper.SKIP,
                 reverse_charge=APIHelper.SKIP,
                 original_gross_amount=APIHelper.SKIP,
                 original_net_amount=APIHelper.SKIP,
                 unit_of_measure=APIHelper.SKIP,
                 road_type=APIHelper.SKIP,
                 customer_country_iso_code=APIHelper.SKIP,
                 ev_operator=APIHelper.SKIP,
                 ev_serial_id=APIHelper.SKIP,
                 ev_charge_point_serial=APIHelper.SKIP,
                 ev_charge_point_connector_type=APIHelper.SKIP,
                 ev_charge_point_connector_type_description=APIHelper.SKIP,
                 ev_charge_duration=APIHelper.SKIP,
                 ev_charge_start_date=APIHelper.SKIP,
                 ev_charge_start_time=APIHelper.SKIP,
                 ev_charge_end_date=APIHelper.SKIP,
                 ev_charge_end_time=APIHelper.SKIP,
                 hosting_collecting_company_number=APIHelper.SKIP,
                 transaction_id=APIHelper.SKIP,
                 fuel_only=APIHelper.SKIP):
        """Constructor for the PricedResponseData class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if account_short_name is not APIHelper.SKIP:
            self.account_short_name = account_short_name 
        if additional_1 is not APIHelper.SKIP:
            self.additional_1 = additional_1 
        if additional_2 is not APIHelper.SKIP:
            self.additional_2 = additional_2 
        if additional_3 is not APIHelper.SKIP:
            self.additional_3 = additional_3 
        if additional_4 is not APIHelper.SKIP:
            self.additional_4 = additional_4 
        if allow_clearing is not APIHelper.SKIP:
            self.allow_clearing = allow_clearing 
        if authorisation_code is not APIHelper.SKIP:
            self.authorisation_code = authorisation_code 
        if transaction_status is not APIHelper.SKIP:
            self.transaction_status = transaction_status 
        if driver_name is not APIHelper.SKIP:
            self.driver_name = driver_name 
        if card_expiry_period is not APIHelper.SKIP:
            self.card_expiry_period = card_expiry_period 
        if card_expiry is not APIHelper.SKIP:
            self.card_expiry = card_expiry 
        if card_group_id is not APIHelper.SKIP:
            self.card_group_id = card_group_id 
        if card_group_name is not APIHelper.SKIP:
            self.card_group_name = card_group_name 
        if issuer_code is not APIHelper.SKIP:
            self.issuer_code = issuer_code 
        if card_pan is not APIHelper.SKIP:
            self.card_pan = card_pan 
        if release_code is not APIHelper.SKIP:
            self.release_code = release_code 
        if card_sequence_number is not APIHelper.SKIP:
            self.card_sequence_number = card_sequence_number 
        if card_type is not APIHelper.SKIP:
            self.card_type = card_type 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if unit_discount_invoice_currency is not APIHelper.SKIP:
            self.unit_discount_invoice_currency = unit_discount_invoice_currency 
        if col_co_exchange_rate is not APIHelper.SKIP:
            self.col_co_exchange_rate = col_co_exchange_rate 
        if invoice_currency_symbol is not APIHelper.SKIP:
            self.invoice_currency_symbol = invoice_currency_symbol 
        if correction_flag is not APIHelper.SKIP:
            self.correction_flag = correction_flag 
        if crm_number is not APIHelper.SKIP:
            self.crm_number = crm_number 
        if customer_country is not APIHelper.SKIP:
            self.customer_country = customer_country 
        if customer_currency_code is not APIHelper.SKIP:
            self.customer_currency_code = customer_currency_code 
        if customer_currency_symbol is not APIHelper.SKIP:
            self.customer_currency_symbol = customer_currency_symbol 
        if rebateon_net_amount_in_customer_currency is not APIHelper.SKIP:
            self.rebateon_net_amount_in_customer_currency = rebateon_net_amount_in_customer_currency 
        if effective_discount_in_customer_currency is not APIHelper.SKIP:
            self.effective_discount_in_customer_currency = effective_discount_in_customer_currency 
        if effective_unit_discount_in_customer_currency is not APIHelper.SKIP:
            self.effective_unit_discount_in_customer_currency = effective_unit_discount_in_customer_currency 
        if unit_price_in_invoice_currency is not APIHelper.SKIP:
            self.unit_price_in_invoice_currency = unit_price_in_invoice_currency 
        if invoice_tax is not APIHelper.SKIP:
            self.invoice_tax = invoice_tax 
        if invoice_gross_amount is not APIHelper.SKIP:
            self.invoice_gross_amount = invoice_gross_amount 
        if invoice_net_amount is not APIHelper.SKIP:
            self.invoice_net_amount = invoice_net_amount 
        if va_ton_net_amount_in_customer_currency is not APIHelper.SKIP:
            self.va_ton_net_amount_in_customer_currency = va_ton_net_amount_in_customer_currency 
        if customer_retail_price_unit_gross is not APIHelper.SKIP:
            self.customer_retail_price_unit_gross = customer_retail_price_unit_gross 
        if customer_retail_value_total_gross is not APIHelper.SKIP:
            self.customer_retail_value_total_gross = customer_retail_value_total_gross 
        if customer_retail_value_total_net is not APIHelper.SKIP:
            self.customer_retail_value_total_net = customer_retail_value_total_net 
        if transaction_type_description is not APIHelper.SKIP:
            self.transaction_type_description = transaction_type_description 
        if rebateon_net_amount_in_transaction_currency is not APIHelper.SKIP:
            self.rebateon_net_amount_in_transaction_currency = rebateon_net_amount_in_transaction_currency 
        if effective_discount_in_trx_currency is not APIHelper.SKIP:
            self.effective_discount_in_trx_currency = effective_discount_in_trx_currency 
        if del_co_to_col_co_exchange_rate is not APIHelper.SKIP:
            self.del_co_to_col_co_exchange_rate = del_co_to_col_co_exchange_rate 
        if cards is not APIHelper.SKIP:
            self.cards = cards 
        if unit_discount_transaction_currency is not APIHelper.SKIP:
            self.unit_discount_transaction_currency = unit_discount_transaction_currency 
        if transaction_gross_amount is not APIHelper.SKIP:
            self.transaction_gross_amount = transaction_gross_amount 
        if transaction_net_amount is not APIHelper.SKIP:
            self.transaction_net_amount = transaction_net_amount 
        if transaction_tax is not APIHelper.SKIP:
            self.transaction_tax = transaction_tax 
        if va_ton_net_amount is not APIHelper.SKIP:
            self.va_ton_net_amount = va_ton_net_amount 
        if delco_list_price_unit_net is not APIHelper.SKIP:
            self.delco_list_price_unit_net = delco_list_price_unit_net 
        if delco_retail_price_unit_gross is not APIHelper.SKIP:
            self.delco_retail_price_unit_gross = delco_retail_price_unit_gross 
        if unit_price_in_transaction_currency is not APIHelper.SKIP:
            self.unit_price_in_transaction_currency = unit_price_in_transaction_currency 
        if delco_retail_price_unit_net is not APIHelper.SKIP:
            self.delco_retail_price_unit_net = delco_retail_price_unit_net 
        if delco_retail_value_total_gross is not APIHelper.SKIP:
            self.delco_retail_value_total_gross = delco_retail_value_total_gross 
        if delco_retail_value_total_net is not APIHelper.SKIP:
            self.delco_retail_value_total_net = delco_retail_value_total_net 
        if transaction_currency_symbol is not APIHelper.SKIP:
            self.transaction_currency_symbol = transaction_currency_symbol 
        if discount_type is not APIHelper.SKIP:
            self.discount_type = discount_type 
        self.dispute_status = dispute_status 
        self.is_shell_site = is_shell_site 
        if fleet_id_input is not APIHelper.SKIP:
            self.fleet_id_input = fleet_id_input 
        if incoming_product_code is not APIHelper.SKIP:
            self.incoming_product_code = incoming_product_code 
        if posting_date is not APIHelper.SKIP:
            self.posting_date = posting_date 
        if posting_time is not APIHelper.SKIP:
            self.posting_time = posting_time 
        if product_code is not APIHelper.SKIP:
            self.product_code = product_code 
        if product_name is not APIHelper.SKIP:
            self.product_name = product_name 
        if product_group_id is not APIHelper.SKIP:
            self.product_group_id = product_group_id 
        if incoming_currency_code is not APIHelper.SKIP:
            self.incoming_currency_code = incoming_currency_code 
        if incoming_site_description is not APIHelper.SKIP:
            self.incoming_site_description = incoming_site_description 
        if location is not APIHelper.SKIP:
            self.location = location 
        if site_name is not APIHelper.SKIP:
            self.site_name = site_name 
        if site_code is not APIHelper.SKIP:
            self.site_code = site_code 
        if incoming_site_number is not APIHelper.SKIP:
            self.incoming_site_number = incoming_site_number 
        if invoice_currency_code is not APIHelper.SKIP:
            self.invoice_currency_code = invoice_currency_code 
        if invoice_date is not APIHelper.SKIP:
            self.invoice_date = invoice_date 
        if invoice_number is not APIHelper.SKIP:
            self.invoice_number = invoice_number 
        if fuel_product is not APIHelper.SKIP:
            self.fuel_product = fuel_product 
        if vat_applicable is not APIHelper.SKIP:
            self.vat_applicable = vat_applicable 
        if payer_name is not APIHelper.SKIP:
            self.payer_name = payer_name 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if parent_customer_number is not APIHelper.SKIP:
            self.parent_customer_number = parent_customer_number 
        if payer_group is not APIHelper.SKIP:
            self.payer_group = payer_group 
        if payer_group_name is not APIHelper.SKIP:
            self.payer_group_name = payer_group_name 
        if check_digit is not APIHelper.SKIP:
            self.check_digit = check_digit 
        if net_invoice_indicator is not APIHelper.SKIP:
            self.net_invoice_indicator = net_invoice_indicator 
        if delco_code is not APIHelper.SKIP:
            self.delco_code = delco_code 
        if network_code is not APIHelper.SKIP:
            self.network_code = network_code 
        if purchased_in_country is not APIHelper.SKIP:
            self.purchased_in_country = purchased_in_country 
        if site_country is not APIHelper.SKIP:
            self.site_country = site_country 
        if vat_country is not APIHelper.SKIP:
            self.vat_country = vat_country 
        if delco_name is not APIHelper.SKIP:
            self.delco_name = delco_name 
        if network is not APIHelper.SKIP:
            self.network = network 
        if odometer_input is not APIHelper.SKIP:
            self.odometer_input = odometer_input 
        if original_sales_item_id is not APIHelper.SKIP:
            self.original_sales_item_id = original_sales_item_id 
        if fleet_id_description is not APIHelper.SKIP:
            self.fleet_id_description = fleet_id_description 
        if parent_customer_id is not APIHelper.SKIP:
            self.parent_customer_id = parent_customer_id 
        if pin_indicator is not APIHelper.SKIP:
            self.pin_indicator = pin_indicator 
        if product_group_name is not APIHelper.SKIP:
            self.product_group_name = product_group_name 
        if purchased_in_country_code is not APIHelper.SKIP:
            self.purchased_in_country_code = purchased_in_country_code 
        if quantity is not APIHelper.SKIP:
            self.quantity = quantity 
        if rebate_rate is not APIHelper.SKIP:
            self.rebate_rate = rebate_rate 
        if receipt_number is not APIHelper.SKIP:
            self.receipt_number = receipt_number 
        if refund_flag is not APIHelper.SKIP:
            self.refund_flag = refund_flag 
        if site_group_id is not APIHelper.SKIP:
            self.site_group_id = site_group_id 
        if site_group_name is not APIHelper.SKIP:
            self.site_group_name = site_group_name 
        if latitude is not APIHelper.SKIP:
            self.latitude = latitude 
        if longitude is not APIHelper.SKIP:
            self.longitude = longitude 
        if del_co_exchange_rate is not APIHelper.SKIP:
            self.del_co_exchange_rate = del_co_exchange_rate 
        if euro_rebate_amount is not APIHelper.SKIP:
            self.euro_rebate_amount = euro_rebate_amount 
        if net_euro_amount is not APIHelper.SKIP:
            self.net_euro_amount = net_euro_amount 
        if euro_vat_amount is not APIHelper.SKIP:
            self.euro_vat_amount = euro_vat_amount 
        if parent_customer_name is not APIHelper.SKIP:
            self.parent_customer_name = parent_customer_name 
        self.is_invoiced = is_invoiced 
        if transaction_currency_code is not APIHelper.SKIP:
            self.transaction_currency_code = transaction_currency_code 
        if credit_debit_code is not APIHelper.SKIP:
            self.credit_debit_code = credit_debit_code 
        if transaction_date is not APIHelper.SKIP:
            self.transaction_date = transaction_date 
        if transaction_time is not APIHelper.SKIP:
            self.transaction_time = transaction_time 
        if transaction_item_id is not APIHelper.SKIP:
            self.transaction_item_id = transaction_item_id 
        if trn_identifier is not APIHelper.SKIP:
            self.trn_identifier = trn_identifier 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if transaction_line is not APIHelper.SKIP:
            self.transaction_line = transaction_line 
        if transaction_type is not APIHelper.SKIP:
            self.transaction_type = transaction_type 
        if utc_offset is not APIHelper.SKIP:
            self.utc_offset = utc_offset 
        if vat_category is not APIHelper.SKIP:
            self.vat_category = vat_category 
        if vat_rate is not APIHelper.SKIP:
            self.vat_rate = vat_rate 
        if vehicle_registration is not APIHelper.SKIP:
            self.vehicle_registration = vehicle_registration 
        if is_cancelled is not APIHelper.SKIP:
            self.is_cancelled = is_cancelled 
        if col_co_gross_amount is not APIHelper.SKIP:
            self.col_co_gross_amount = col_co_gross_amount 
        if col_co_net_amount is not APIHelper.SKIP:
            self.col_co_net_amount = col_co_net_amount 
        if col_co_vat_amount is not APIHelper.SKIP:
            self.col_co_vat_amount = col_co_vat_amount 
        if original_currency_symbol is not APIHelper.SKIP:
            self.original_currency_symbol = original_currency_symbol 
        if original_currency_code is not APIHelper.SKIP:
            self.original_currency_code = original_currency_code 
        if original_vat_amount is not APIHelper.SKIP:
            self.original_vat_amount = original_vat_amount 
        if emboss_text is not APIHelper.SKIP:
            self.emboss_text = emboss_text 
        if original_exchange_rate is not APIHelper.SKIP:
            self.original_exchange_rate = original_exchange_rate 
        if original_transaction_item_invoice_date is not APIHelper.SKIP:
            self.original_transaction_item_invoice_date = original_transaction_item_invoice_date 
        if fee_type_id is not APIHelper.SKIP:
            self.fee_type_id = fee_type_id 
        self.line_item_description = line_item_description 
        if fee_rule_description is not APIHelper.SKIP:
            self.fee_rule_description = fee_rule_description 
        if frequency is not APIHelper.SKIP:
            self.frequency = frequency 
        if fee_rule_id is not APIHelper.SKIP:
            self.fee_rule_id = fee_rule_id 
        if system_entry_date is not APIHelper.SKIP:
            self.system_entry_date = system_entry_date 
        if system_entry_time is not APIHelper.SKIP:
            self.system_entry_time = system_entry_time 
        if is_manual is not APIHelper.SKIP:
            self.is_manual = is_manual 
        if original_transaction_item_id is not APIHelper.SKIP:
            self.original_transaction_item_id = original_transaction_item_id 
        if original_transaction_item_invoice_number is not APIHelper.SKIP:
            self.original_transaction_item_invoice_number = original_transaction_item_invoice_number 
        if original_transaction_item_invoice_id is not APIHelper.SKIP:
            self.original_transaction_item_invoice_id = original_transaction_item_invoice_id 
        if payer_short_name is not APIHelper.SKIP:
            self.payer_short_name = payer_short_name 
        if reverse_charge is not APIHelper.SKIP:
            self.reverse_charge = reverse_charge 
        if original_gross_amount is not APIHelper.SKIP:
            self.original_gross_amount = original_gross_amount 
        if original_net_amount is not APIHelper.SKIP:
            self.original_net_amount = original_net_amount 
        if unit_of_measure is not APIHelper.SKIP:
            self.unit_of_measure = unit_of_measure 
        if road_type is not APIHelper.SKIP:
            self.road_type = road_type 
        if customer_country_iso_code is not APIHelper.SKIP:
            self.customer_country_iso_code = customer_country_iso_code 
        if ev_operator is not APIHelper.SKIP:
            self.ev_operator = ev_operator 
        if ev_serial_id is not APIHelper.SKIP:
            self.ev_serial_id = ev_serial_id 
        if ev_charge_point_serial is not APIHelper.SKIP:
            self.ev_charge_point_serial = ev_charge_point_serial 
        if ev_charge_point_connector_type is not APIHelper.SKIP:
            self.ev_charge_point_connector_type = ev_charge_point_connector_type 
        if ev_charge_point_connector_type_description is not APIHelper.SKIP:
            self.ev_charge_point_connector_type_description = ev_charge_point_connector_type_description 
        if ev_charge_duration is not APIHelper.SKIP:
            self.ev_charge_duration = ev_charge_duration 
        if ev_charge_start_date is not APIHelper.SKIP:
            self.ev_charge_start_date = ev_charge_start_date 
        if ev_charge_start_time is not APIHelper.SKIP:
            self.ev_charge_start_time = ev_charge_start_time 
        if ev_charge_end_date is not APIHelper.SKIP:
            self.ev_charge_end_date = ev_charge_end_date 
        if ev_charge_end_time is not APIHelper.SKIP:
            self.ev_charge_end_time = ev_charge_end_time 
        if hosting_collecting_company_number is not APIHelper.SKIP:
            self.hosting_collecting_company_number = hosting_collecting_company_number 
        if transaction_id is not APIHelper.SKIP:
            self.transaction_id = transaction_id 
        if fuel_only is not APIHelper.SKIP:
            self.fuel_only = fuel_only 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("AccountName") if "AccountName" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        account_short_name = dictionary.get("AccountShortName") if "AccountShortName" in dictionary.keys() else APIHelper.SKIP
        additional_1 = dictionary.get("Additional1") if "Additional1" in dictionary.keys() else APIHelper.SKIP
        additional_2 = dictionary.get("Additional2") if "Additional2" in dictionary.keys() else APIHelper.SKIP
        additional_3 = dictionary.get("Additional3") if "Additional3" in dictionary.keys() else APIHelper.SKIP
        additional_4 = dictionary.get("Additional4") if "Additional4" in dictionary.keys() else APIHelper.SKIP
        allow_clearing = dictionary.get("AllowClearing") if "AllowClearing" in dictionary.keys() else APIHelper.SKIP
        authorisation_code = dictionary.get("AuthorisationCode") if "AuthorisationCode" in dictionary.keys() else APIHelper.SKIP
        transaction_status = dictionary.get("TransactionStatus") if "TransactionStatus" in dictionary.keys() else APIHelper.SKIP
        driver_name = dictionary.get("DriverName") if "DriverName" in dictionary.keys() else APIHelper.SKIP
        card_expiry_period = dictionary.get("CardExpiryPeriod") if "CardExpiryPeriod" in dictionary.keys() else APIHelper.SKIP
        card_expiry = dictionary.get("CardExpiry") if "CardExpiry" in dictionary.keys() else APIHelper.SKIP
        card_group_id = dictionary.get("CardGroupId") if "CardGroupId" in dictionary.keys() else APIHelper.SKIP
        card_group_name = dictionary.get("CardGroupName") if "CardGroupName" in dictionary.keys() else APIHelper.SKIP
        issuer_code = dictionary.get("IssuerCode") if "IssuerCode" in dictionary.keys() else APIHelper.SKIP
        card_pan = dictionary.get("CardPAN") if "CardPAN" in dictionary.keys() else APIHelper.SKIP
        release_code = dictionary.get("ReleaseCode") if "ReleaseCode" in dictionary.keys() else APIHelper.SKIP
        card_sequence_number = dictionary.get("CardSequenceNumber") if "CardSequenceNumber" in dictionary.keys() else APIHelper.SKIP
        card_type = dictionary.get("CardType") if "CardType" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        unit_discount_invoice_currency = dictionary.get("UnitDiscountInvoiceCurrency") if "UnitDiscountInvoiceCurrency" in dictionary.keys() else APIHelper.SKIP
        col_co_exchange_rate = dictionary.get("ColCoExchangeRate") if dictionary.get("ColCoExchangeRate") else APIHelper.SKIP
        invoice_currency_symbol = dictionary.get("InvoiceCurrencySymbol") if "InvoiceCurrencySymbol" in dictionary.keys() else APIHelper.SKIP
        correction_flag = dictionary.get("CorrectionFlag") if "CorrectionFlag" in dictionary.keys() else APIHelper.SKIP
        crm_number = dictionary.get("CRMNumber") if "CRMNumber" in dictionary.keys() else APIHelper.SKIP
        customer_country = dictionary.get("CustomerCountry") if "CustomerCountry" in dictionary.keys() else APIHelper.SKIP
        customer_currency_code = dictionary.get("CustomerCurrencyCode") if "CustomerCurrencyCode" in dictionary.keys() else APIHelper.SKIP
        customer_currency_symbol = dictionary.get("CustomerCurrencySymbol") if "CustomerCurrencySymbol" in dictionary.keys() else APIHelper.SKIP
        rebateon_net_amount_in_customer_currency = dictionary.get("RebateonNetAmountInCustomerCurrency") if "RebateonNetAmountInCustomerCurrency" in dictionary.keys() else APIHelper.SKIP
        effective_discount_in_customer_currency = dictionary.get("EffectiveDiscountInCustomerCurrency") if "EffectiveDiscountInCustomerCurrency" in dictionary.keys() else APIHelper.SKIP
        effective_unit_discount_in_customer_currency = dictionary.get("EffectiveUnitDiscountInCustomerCurrency") if "EffectiveUnitDiscountInCustomerCurrency" in dictionary.keys() else APIHelper.SKIP
        unit_price_in_invoice_currency = dictionary.get("UnitPriceInInvoiceCurrency") if "UnitPriceInInvoiceCurrency" in dictionary.keys() else APIHelper.SKIP
        invoice_tax = dictionary.get("InvoiceTax") if "InvoiceTax" in dictionary.keys() else APIHelper.SKIP
        invoice_gross_amount = dictionary.get("InvoiceGrossAmount") if "InvoiceGrossAmount" in dictionary.keys() else APIHelper.SKIP
        invoice_net_amount = dictionary.get("InvoiceNetAmount") if "InvoiceNetAmount" in dictionary.keys() else APIHelper.SKIP
        va_ton_net_amount_in_customer_currency = dictionary.get("VATonNetAmountInCustomerCurrency") if "VATonNetAmountInCustomerCurrency" in dictionary.keys() else APIHelper.SKIP
        customer_retail_price_unit_gross = dictionary.get("CustomerRetailPriceUnitGross") if "CustomerRetailPriceUnitGross" in dictionary.keys() else APIHelper.SKIP
        customer_retail_value_total_gross = dictionary.get("CustomerRetailValueTotalGross") if "CustomerRetailValueTotalGross" in dictionary.keys() else APIHelper.SKIP
        customer_retail_value_total_net = dictionary.get("CustomerRetailValueTotalNet") if "CustomerRetailValueTotalNet" in dictionary.keys() else APIHelper.SKIP
        transaction_type_description = dictionary.get("TransactionTypeDescription") if "TransactionTypeDescription" in dictionary.keys() else APIHelper.SKIP
        rebateon_net_amount_in_transaction_currency = dictionary.get("RebateonNetAmountInTransactionCurrency") if "RebateonNetAmountInTransactionCurrency" in dictionary.keys() else APIHelper.SKIP
        effective_discount_in_trx_currency = dictionary.get("EffectiveDiscountInTrxCurrency") if "EffectiveDiscountInTrxCurrency" in dictionary.keys() else APIHelper.SKIP
        del_co_to_col_co_exchange_rate = dictionary.get("DelCoToColCoExchangeRate") if "DelCoToColCoExchangeRate" in dictionary.keys() else APIHelper.SKIP
        cards = dictionary.get("Cards") if dictionary.get("Cards") else APIHelper.SKIP
        unit_discount_transaction_currency = dictionary.get("UnitDiscountTransactionCurrency") if "UnitDiscountTransactionCurrency" in dictionary.keys() else APIHelper.SKIP
        transaction_gross_amount = dictionary.get("TransactionGrossAmount") if "TransactionGrossAmount" in dictionary.keys() else APIHelper.SKIP
        transaction_net_amount = dictionary.get("TransactionNetAmount") if "TransactionNetAmount" in dictionary.keys() else APIHelper.SKIP
        transaction_tax = dictionary.get("TransactionTax") if "TransactionTax" in dictionary.keys() else APIHelper.SKIP
        va_ton_net_amount = dictionary.get("VATonNetAmount") if "VATonNetAmount" in dictionary.keys() else APIHelper.SKIP
        delco_list_price_unit_net = dictionary.get("DelcoListPriceUnitNet") if "DelcoListPriceUnitNet" in dictionary.keys() else APIHelper.SKIP
        delco_retail_price_unit_gross = dictionary.get("DelcoRetailPriceUnitGross") if "DelcoRetailPriceUnitGross" in dictionary.keys() else APIHelper.SKIP
        unit_price_in_transaction_currency = dictionary.get("UnitPriceInTransactionCurrency") if "UnitPriceInTransactionCurrency" in dictionary.keys() else APIHelper.SKIP
        delco_retail_price_unit_net = dictionary.get("DelcoRetailPriceUnitNet") if "DelcoRetailPriceUnitNet" in dictionary.keys() else APIHelper.SKIP
        delco_retail_value_total_gross = dictionary.get("DelcoRetailValueTotalGross") if "DelcoRetailValueTotalGross" in dictionary.keys() else APIHelper.SKIP
        delco_retail_value_total_net = dictionary.get("DelcoRetailValueTotalNet") if "DelcoRetailValueTotalNet" in dictionary.keys() else APIHelper.SKIP
        transaction_currency_symbol = dictionary.get("TransactionCurrencySymbol") if "TransactionCurrencySymbol" in dictionary.keys() else APIHelper.SKIP
        discount_type = dictionary.get("DiscountType") if "DiscountType" in dictionary.keys() else APIHelper.SKIP
        dispute_status = dictionary.get("DisputeStatus") if dictionary.get("DisputeStatus") else False
        is_shell_site = dictionary.get("IsShellSite") if dictionary.get("IsShellSite") else False
        fleet_id_input = dictionary.get("FleetIdInput") if "FleetIdInput" in dictionary.keys() else APIHelper.SKIP
        incoming_product_code = dictionary.get("IncomingProductCode") if "IncomingProductCode" in dictionary.keys() else APIHelper.SKIP
        posting_date = dictionary.get("PostingDate") if "PostingDate" in dictionary.keys() else APIHelper.SKIP
        posting_time = dictionary.get("PostingTime") if "PostingTime" in dictionary.keys() else APIHelper.SKIP
        product_code = dictionary.get("ProductCode") if "ProductCode" in dictionary.keys() else APIHelper.SKIP
        product_name = dictionary.get("ProductName") if "ProductName" in dictionary.keys() else APIHelper.SKIP
        product_group_id = dictionary.get("ProductGroupId") if "ProductGroupId" in dictionary.keys() else APIHelper.SKIP
        incoming_currency_code = dictionary.get("IncomingCurrencyCode") if "IncomingCurrencyCode" in dictionary.keys() else APIHelper.SKIP
        incoming_site_description = dictionary.get("IncomingSiteDescription") if "IncomingSiteDescription" in dictionary.keys() else APIHelper.SKIP
        location = dictionary.get("Location") if "Location" in dictionary.keys() else APIHelper.SKIP
        site_name = dictionary.get("SiteName") if "SiteName" in dictionary.keys() else APIHelper.SKIP
        site_code = dictionary.get("SiteCode") if "SiteCode" in dictionary.keys() else APIHelper.SKIP
        incoming_site_number = dictionary.get("IncomingSiteNumber") if "IncomingSiteNumber" in dictionary.keys() else APIHelper.SKIP
        invoice_currency_code = dictionary.get("InvoiceCurrencyCode") if "InvoiceCurrencyCode" in dictionary.keys() else APIHelper.SKIP
        invoice_date = dictionary.get("InvoiceDate") if "InvoiceDate" in dictionary.keys() else APIHelper.SKIP
        invoice_number = dictionary.get("InvoiceNumber") if "InvoiceNumber" in dictionary.keys() else APIHelper.SKIP
        fuel_product = dictionary.get("FuelProduct") if "FuelProduct" in dictionary.keys() else APIHelper.SKIP
        vat_applicable = dictionary.get("VATApplicable") if "VATApplicable" in dictionary.keys() else APIHelper.SKIP
        payer_name = dictionary.get("PayerName") if "PayerName" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        parent_customer_number = dictionary.get("ParentCustomerNumber") if "ParentCustomerNumber" in dictionary.keys() else APIHelper.SKIP
        payer_group = dictionary.get("PayerGroup") if "PayerGroup" in dictionary.keys() else APIHelper.SKIP
        payer_group_name = dictionary.get("PayerGroupName") if "PayerGroupName" in dictionary.keys() else APIHelper.SKIP
        check_digit = dictionary.get("CheckDigit") if "CheckDigit" in dictionary.keys() else APIHelper.SKIP
        net_invoice_indicator = dictionary.get("NetInvoiceIndicator") if "NetInvoiceIndicator" in dictionary.keys() else APIHelper.SKIP
        delco_code = dictionary.get("DelcoCode") if "DelcoCode" in dictionary.keys() else APIHelper.SKIP
        network_code = dictionary.get("NetworkCode") if "NetworkCode" in dictionary.keys() else APIHelper.SKIP
        purchased_in_country = dictionary.get("PurchasedInCountry") if "PurchasedInCountry" in dictionary.keys() else APIHelper.SKIP
        site_country = dictionary.get("SiteCountry") if "SiteCountry" in dictionary.keys() else APIHelper.SKIP
        vat_country = dictionary.get("VATCountry") if "VATCountry" in dictionary.keys() else APIHelper.SKIP
        delco_name = dictionary.get("DelcoName") if "DelcoName" in dictionary.keys() else APIHelper.SKIP
        network = dictionary.get("Network") if "Network" in dictionary.keys() else APIHelper.SKIP
        odometer_input = dictionary.get("OdometerInput") if "OdometerInput" in dictionary.keys() else APIHelper.SKIP
        original_sales_item_id = dictionary.get("OriginalSalesItemId") if "OriginalSalesItemId" in dictionary.keys() else APIHelper.SKIP
        fleet_id_description = dictionary.get("FleetIDDescription") if "FleetIDDescription" in dictionary.keys() else APIHelper.SKIP
        parent_customer_id = dictionary.get("ParentCustomerId") if "ParentCustomerId" in dictionary.keys() else APIHelper.SKIP
        pin_indicator = dictionary.get("PINIndicator") if "PINIndicator" in dictionary.keys() else APIHelper.SKIP
        product_group_name = dictionary.get("ProductGroupName") if "ProductGroupName" in dictionary.keys() else APIHelper.SKIP
        purchased_in_country_code = dictionary.get("PurchasedInCountryCode") if "PurchasedInCountryCode" in dictionary.keys() else APIHelper.SKIP
        quantity = dictionary.get("Quantity") if "Quantity" in dictionary.keys() else APIHelper.SKIP
        rebate_rate = dictionary.get("RebateRate") if "RebateRate" in dictionary.keys() else APIHelper.SKIP
        receipt_number = dictionary.get("ReceiptNumber") if "ReceiptNumber" in dictionary.keys() else APIHelper.SKIP
        refund_flag = dictionary.get("RefundFlag") if dictionary.get("RefundFlag") else APIHelper.SKIP
        site_group_id = dictionary.get("SiteGroupId") if "SiteGroupId" in dictionary.keys() else APIHelper.SKIP
        site_group_name = dictionary.get("SiteGroupName") if "SiteGroupName" in dictionary.keys() else APIHelper.SKIP
        latitude = dictionary.get("Latitude") if "Latitude" in dictionary.keys() else APIHelper.SKIP
        longitude = dictionary.get("Longitude") if "Longitude" in dictionary.keys() else APIHelper.SKIP
        del_co_exchange_rate = dictionary.get("DelCoExchangeRate") if "DelCoExchangeRate" in dictionary.keys() else APIHelper.SKIP
        euro_rebate_amount = dictionary.get("EuroRebateAmount") if "EuroRebateAmount" in dictionary.keys() else APIHelper.SKIP
        net_euro_amount = dictionary.get("NetEuroAmount") if "NetEuroAmount" in dictionary.keys() else APIHelper.SKIP
        euro_vat_amount = dictionary.get("EuroVATAmount") if "EuroVATAmount" in dictionary.keys() else APIHelper.SKIP
        parent_customer_name = dictionary.get("ParentCustomerName") if "ParentCustomerName" in dictionary.keys() else APIHelper.SKIP
        is_invoiced = dictionary.get("IsInvoiced") if dictionary.get("IsInvoiced") else False
        transaction_currency_code = dictionary.get("TransactionCurrencyCode") if "TransactionCurrencyCode" in dictionary.keys() else APIHelper.SKIP
        credit_debit_code = dictionary.get("CreditDebitCode") if "CreditDebitCode" in dictionary.keys() else APIHelper.SKIP
        transaction_date = dictionary.get("TransactionDate") if "TransactionDate" in dictionary.keys() else APIHelper.SKIP
        transaction_time = dictionary.get("TransactionTime") if "TransactionTime" in dictionary.keys() else APIHelper.SKIP
        transaction_item_id = dictionary.get("TransactionItemId") if "TransactionItemId" in dictionary.keys() else APIHelper.SKIP
        trn_identifier = dictionary.get("TrnIdentifier") if "TrnIdentifier" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("Type") if "Type" in dictionary.keys() else APIHelper.SKIP
        transaction_line = dictionary.get("TransactionLine") if "TransactionLine" in dictionary.keys() else APIHelper.SKIP
        transaction_type = dictionary.get("TransactionType") if "TransactionType" in dictionary.keys() else APIHelper.SKIP
        utc_offset = dictionary.get("UTCOffset") if "UTCOffset" in dictionary.keys() else APIHelper.SKIP
        vat_category = dictionary.get("VATCategory") if "VATCategory" in dictionary.keys() else APIHelper.SKIP
        vat_rate = dictionary.get("VATRate") if "VATRate" in dictionary.keys() else APIHelper.SKIP
        vehicle_registration = dictionary.get("VehicleRegistration") if "VehicleRegistration" in dictionary.keys() else APIHelper.SKIP
        is_cancelled = dictionary.get("IsCancelled") if "IsCancelled" in dictionary.keys() else APIHelper.SKIP
        col_co_gross_amount = dictionary.get("ColCoGrossAmount") if "ColCoGrossAmount" in dictionary.keys() else APIHelper.SKIP
        col_co_net_amount = dictionary.get("ColCoNetAmount") if "ColCoNetAmount" in dictionary.keys() else APIHelper.SKIP
        col_co_vat_amount = dictionary.get("ColCoVATAmount") if "ColCoVATAmount" in dictionary.keys() else APIHelper.SKIP
        original_currency_symbol = dictionary.get("OriginalCurrencySymbol") if "OriginalCurrencySymbol" in dictionary.keys() else APIHelper.SKIP
        original_currency_code = dictionary.get("OriginalCurrencyCode") if "OriginalCurrencyCode" in dictionary.keys() else APIHelper.SKIP
        original_vat_amount = dictionary.get("OriginalVATAmount") if "OriginalVATAmount" in dictionary.keys() else APIHelper.SKIP
        emboss_text = dictionary.get("EmbossText") if "EmbossText" in dictionary.keys() else APIHelper.SKIP
        original_exchange_rate = dictionary.get("OriginalExchangeRate") if "OriginalExchangeRate" in dictionary.keys() else APIHelper.SKIP
        original_transaction_item_invoice_date = dictionary.get("OriginalTransactionItemInvoiceDate") if "OriginalTransactionItemInvoiceDate" in dictionary.keys() else APIHelper.SKIP
        fee_type_id = dictionary.get("FeeTypeId") if "FeeTypeId" in dictionary.keys() else APIHelper.SKIP
        line_item_description = dictionary.get("LineItemDescription") if dictionary.get("LineItemDescription") else False
        fee_rule_description = dictionary.get("FeeRuleDescription") if "FeeRuleDescription" in dictionary.keys() else APIHelper.SKIP
        frequency = dictionary.get("Frequency") if "Frequency" in dictionary.keys() else APIHelper.SKIP
        fee_rule_id = dictionary.get("FeeRuleId") if "FeeRuleId" in dictionary.keys() else APIHelper.SKIP
        system_entry_date = dictionary.get("SystemEntryDate") if "SystemEntryDate" in dictionary.keys() else APIHelper.SKIP
        system_entry_time = dictionary.get("SystemEntryTime") if "SystemEntryTime" in dictionary.keys() else APIHelper.SKIP
        is_manual = dictionary.get("IsManual") if "IsManual" in dictionary.keys() else APIHelper.SKIP
        original_transaction_item_id = dictionary.get("OriginalTransactionItemId") if "OriginalTransactionItemId" in dictionary.keys() else APIHelper.SKIP
        original_transaction_item_invoice_number = dictionary.get("OriginalTransactionItemInvoiceNumber") if "OriginalTransactionItemInvoiceNumber" in dictionary.keys() else APIHelper.SKIP
        original_transaction_item_invoice_id = dictionary.get("OriginalTransactionItemInvoiceId") if "OriginalTransactionItemInvoiceId" in dictionary.keys() else APIHelper.SKIP
        payer_short_name = dictionary.get("PayerShortName") if "PayerShortName" in dictionary.keys() else APIHelper.SKIP
        reverse_charge = dictionary.get("ReverseCharge") if "ReverseCharge" in dictionary.keys() else APIHelper.SKIP
        original_gross_amount = dictionary.get("OriginalGrossAmount") if "OriginalGrossAmount" in dictionary.keys() else APIHelper.SKIP
        original_net_amount = dictionary.get("OriginalNetAmount") if "OriginalNetAmount" in dictionary.keys() else APIHelper.SKIP
        unit_of_measure = dictionary.get("UnitOfMeasure") if "UnitOfMeasure" in dictionary.keys() else APIHelper.SKIP
        road_type = dictionary.get("RoadType") if "RoadType" in dictionary.keys() else APIHelper.SKIP
        customer_country_iso_code = dictionary.get("CustomerCountryIsoCode") if "CustomerCountryIsoCode" in dictionary.keys() else APIHelper.SKIP
        ev_operator = dictionary.get("EVOperator") if "EVOperator" in dictionary.keys() else APIHelper.SKIP
        ev_serial_id = dictionary.get("EVSerialId") if "EVSerialId" in dictionary.keys() else APIHelper.SKIP
        ev_charge_point_serial = dictionary.get("EVChargePointSerial") if "EVChargePointSerial" in dictionary.keys() else APIHelper.SKIP
        ev_charge_point_connector_type = dictionary.get("EVChargePointConnectorType") if "EVChargePointConnectorType" in dictionary.keys() else APIHelper.SKIP
        ev_charge_point_connector_type_description = dictionary.get("EVChargePointConnectorTypeDescription") if "EVChargePointConnectorTypeDescription" in dictionary.keys() else APIHelper.SKIP
        ev_charge_duration = dictionary.get("EVChargeDuration") if "EVChargeDuration" in dictionary.keys() else APIHelper.SKIP
        ev_charge_start_date = dictionary.get("EVChargeStartDate") if "EVChargeStartDate" in dictionary.keys() else APIHelper.SKIP
        ev_charge_start_time = dictionary.get("EVChargeStartTime") if "EVChargeStartTime" in dictionary.keys() else APIHelper.SKIP
        ev_charge_end_date = dictionary.get("EVChargeEndDate") if "EVChargeEndDate" in dictionary.keys() else APIHelper.SKIP
        ev_charge_end_time = dictionary.get("EVChargeEndTime") if "EVChargeEndTime" in dictionary.keys() else APIHelper.SKIP
        hosting_collecting_company_number = dictionary.get("HostingCollectingCompanyNumber") if "HostingCollectingCompanyNumber" in dictionary.keys() else APIHelper.SKIP
        transaction_id = dictionary.get("TransactionId") if "TransactionId" in dictionary.keys() else APIHelper.SKIP
        fuel_only = dictionary.get("FuelOnly") if "FuelOnly" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   account_id,
                   account_number,
                   account_short_name,
                   additional_1,
                   additional_2,
                   additional_3,
                   additional_4,
                   allow_clearing,
                   authorisation_code,
                   transaction_status,
                   driver_name,
                   card_expiry_period,
                   card_expiry,
                   card_group_id,
                   card_group_name,
                   issuer_code,
                   card_pan,
                   release_code,
                   card_sequence_number,
                   card_type,
                   col_co_code,
                   unit_discount_invoice_currency,
                   col_co_exchange_rate,
                   invoice_currency_symbol,
                   correction_flag,
                   crm_number,
                   customer_country,
                   customer_currency_code,
                   customer_currency_symbol,
                   rebateon_net_amount_in_customer_currency,
                   effective_discount_in_customer_currency,
                   effective_unit_discount_in_customer_currency,
                   unit_price_in_invoice_currency,
                   invoice_tax,
                   invoice_gross_amount,
                   invoice_net_amount,
                   va_ton_net_amount_in_customer_currency,
                   customer_retail_price_unit_gross,
                   customer_retail_value_total_gross,
                   customer_retail_value_total_net,
                   transaction_type_description,
                   rebateon_net_amount_in_transaction_currency,
                   effective_discount_in_trx_currency,
                   del_co_to_col_co_exchange_rate,
                   cards,
                   unit_discount_transaction_currency,
                   transaction_gross_amount,
                   transaction_net_amount,
                   transaction_tax,
                   va_ton_net_amount,
                   delco_list_price_unit_net,
                   delco_retail_price_unit_gross,
                   unit_price_in_transaction_currency,
                   delco_retail_price_unit_net,
                   delco_retail_value_total_gross,
                   delco_retail_value_total_net,
                   transaction_currency_symbol,
                   discount_type,
                   dispute_status,
                   is_shell_site,
                   fleet_id_input,
                   incoming_product_code,
                   posting_date,
                   posting_time,
                   product_code,
                   product_name,
                   product_group_id,
                   incoming_currency_code,
                   incoming_site_description,
                   location,
                   site_name,
                   site_code,
                   incoming_site_number,
                   invoice_currency_code,
                   invoice_date,
                   invoice_number,
                   fuel_product,
                   vat_applicable,
                   payer_name,
                   payer_number,
                   parent_customer_number,
                   payer_group,
                   payer_group_name,
                   check_digit,
                   net_invoice_indicator,
                   delco_code,
                   network_code,
                   purchased_in_country,
                   site_country,
                   vat_country,
                   delco_name,
                   network,
                   odometer_input,
                   original_sales_item_id,
                   fleet_id_description,
                   parent_customer_id,
                   pin_indicator,
                   product_group_name,
                   purchased_in_country_code,
                   quantity,
                   rebate_rate,
                   receipt_number,
                   refund_flag,
                   site_group_id,
                   site_group_name,
                   latitude,
                   longitude,
                   del_co_exchange_rate,
                   euro_rebate_amount,
                   net_euro_amount,
                   euro_vat_amount,
                   parent_customer_name,
                   is_invoiced,
                   transaction_currency_code,
                   credit_debit_code,
                   transaction_date,
                   transaction_time,
                   transaction_item_id,
                   trn_identifier,
                   mtype,
                   transaction_line,
                   transaction_type,
                   utc_offset,
                   vat_category,
                   vat_rate,
                   vehicle_registration,
                   is_cancelled,
                   col_co_gross_amount,
                   col_co_net_amount,
                   col_co_vat_amount,
                   original_currency_symbol,
                   original_currency_code,
                   original_vat_amount,
                   emboss_text,
                   original_exchange_rate,
                   original_transaction_item_invoice_date,
                   fee_type_id,
                   line_item_description,
                   fee_rule_description,
                   frequency,
                   fee_rule_id,
                   system_entry_date,
                   system_entry_time,
                   is_manual,
                   original_transaction_item_id,
                   original_transaction_item_invoice_number,
                   original_transaction_item_invoice_id,
                   payer_short_name,
                   reverse_charge,
                   original_gross_amount,
                   original_net_amount,
                   unit_of_measure,
                   road_type,
                   customer_country_iso_code,
                   ev_operator,
                   ev_serial_id,
                   ev_charge_point_serial,
                   ev_charge_point_connector_type,
                   ev_charge_point_connector_type_description,
                   ev_charge_duration,
                   ev_charge_start_date,
                   ev_charge_start_time,
                   ev_charge_end_date,
                   ev_charge_end_time,
                   hosting_collecting_company_number,
                   transaction_id,
                   fuel_only)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'account_short_name={(self.account_short_name if hasattr(self, "account_short_name") else None)!r}, '
                f'additional_1={(self.additional_1 if hasattr(self, "additional_1") else None)!r}, '
                f'additional_2={(self.additional_2 if hasattr(self, "additional_2") else None)!r}, '
                f'additional_3={(self.additional_3 if hasattr(self, "additional_3") else None)!r}, '
                f'additional_4={(self.additional_4 if hasattr(self, "additional_4") else None)!r}, '
                f'allow_clearing={(self.allow_clearing if hasattr(self, "allow_clearing") else None)!r}, '
                f'authorisation_code={(self.authorisation_code if hasattr(self, "authorisation_code") else None)!r}, '
                f'transaction_status={(self.transaction_status if hasattr(self, "transaction_status") else None)!r}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!r}, '
                f'card_expiry_period={(self.card_expiry_period if hasattr(self, "card_expiry_period") else None)!r}, '
                f'card_expiry={(self.card_expiry if hasattr(self, "card_expiry") else None)!r}, '
                f'card_group_id={(self.card_group_id if hasattr(self, "card_group_id") else None)!r}, '
                f'card_group_name={(self.card_group_name if hasattr(self, "card_group_name") else None)!r}, '
                f'issuer_code={(self.issuer_code if hasattr(self, "issuer_code") else None)!r}, '
                f'card_pan={(self.card_pan if hasattr(self, "card_pan") else None)!r}, '
                f'release_code={(self.release_code if hasattr(self, "release_code") else None)!r}, '
                f'card_sequence_number={(self.card_sequence_number if hasattr(self, "card_sequence_number") else None)!r}, '
                f'card_type={(self.card_type if hasattr(self, "card_type") else None)!r}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!r}, '
                f'unit_discount_invoice_currency={(self.unit_discount_invoice_currency if hasattr(self, "unit_discount_invoice_currency") else None)!r}, '
                f'col_co_exchange_rate={(self.col_co_exchange_rate if hasattr(self, "col_co_exchange_rate") else None)!r}, '
                f'invoice_currency_symbol={(self.invoice_currency_symbol if hasattr(self, "invoice_currency_symbol") else None)!r}, '
                f'correction_flag={(self.correction_flag if hasattr(self, "correction_flag") else None)!r}, '
                f'crm_number={(self.crm_number if hasattr(self, "crm_number") else None)!r}, '
                f'customer_country={(self.customer_country if hasattr(self, "customer_country") else None)!r}, '
                f'customer_currency_code={(self.customer_currency_code if hasattr(self, "customer_currency_code") else None)!r}, '
                f'customer_currency_symbol={(self.customer_currency_symbol if hasattr(self, "customer_currency_symbol") else None)!r}, '
                f'rebateon_net_amount_in_customer_currency={(self.rebateon_net_amount_in_customer_currency if hasattr(self, "rebateon_net_amount_in_customer_currency") else None)!r}, '
                f'effective_discount_in_customer_currency={(self.effective_discount_in_customer_currency if hasattr(self, "effective_discount_in_customer_currency") else None)!r}, '
                f'effective_unit_discount_in_customer_currency={(self.effective_unit_discount_in_customer_currency if hasattr(self, "effective_unit_discount_in_customer_currency") else None)!r}, '
                f'unit_price_in_invoice_currency={(self.unit_price_in_invoice_currency if hasattr(self, "unit_price_in_invoice_currency") else None)!r}, '
                f'invoice_tax={(self.invoice_tax if hasattr(self, "invoice_tax") else None)!r}, '
                f'invoice_gross_amount={(self.invoice_gross_amount if hasattr(self, "invoice_gross_amount") else None)!r}, '
                f'invoice_net_amount={(self.invoice_net_amount if hasattr(self, "invoice_net_amount") else None)!r}, '
                f'va_ton_net_amount_in_customer_currency={(self.va_ton_net_amount_in_customer_currency if hasattr(self, "va_ton_net_amount_in_customer_currency") else None)!r}, '
                f'customer_retail_price_unit_gross={(self.customer_retail_price_unit_gross if hasattr(self, "customer_retail_price_unit_gross") else None)!r}, '
                f'customer_retail_value_total_gross={(self.customer_retail_value_total_gross if hasattr(self, "customer_retail_value_total_gross") else None)!r}, '
                f'customer_retail_value_total_net={(self.customer_retail_value_total_net if hasattr(self, "customer_retail_value_total_net") else None)!r}, '
                f'transaction_type_description={(self.transaction_type_description if hasattr(self, "transaction_type_description") else None)!r}, '
                f'rebateon_net_amount_in_transaction_currency={(self.rebateon_net_amount_in_transaction_currency if hasattr(self, "rebateon_net_amount_in_transaction_currency") else None)!r}, '
                f'effective_discount_in_trx_currency={(self.effective_discount_in_trx_currency if hasattr(self, "effective_discount_in_trx_currency") else None)!r}, '
                f'del_co_to_col_co_exchange_rate={(self.del_co_to_col_co_exchange_rate if hasattr(self, "del_co_to_col_co_exchange_rate") else None)!r}, '
                f'cards={(self.cards if hasattr(self, "cards") else None)!r}, '
                f'unit_discount_transaction_currency={(self.unit_discount_transaction_currency if hasattr(self, "unit_discount_transaction_currency") else None)!r}, '
                f'transaction_gross_amount={(self.transaction_gross_amount if hasattr(self, "transaction_gross_amount") else None)!r}, '
                f'transaction_net_amount={(self.transaction_net_amount if hasattr(self, "transaction_net_amount") else None)!r}, '
                f'transaction_tax={(self.transaction_tax if hasattr(self, "transaction_tax") else None)!r}, '
                f'va_ton_net_amount={(self.va_ton_net_amount if hasattr(self, "va_ton_net_amount") else None)!r}, '
                f'delco_list_price_unit_net={(self.delco_list_price_unit_net if hasattr(self, "delco_list_price_unit_net") else None)!r}, '
                f'delco_retail_price_unit_gross={(self.delco_retail_price_unit_gross if hasattr(self, "delco_retail_price_unit_gross") else None)!r}, '
                f'unit_price_in_transaction_currency={(self.unit_price_in_transaction_currency if hasattr(self, "unit_price_in_transaction_currency") else None)!r}, '
                f'delco_retail_price_unit_net={(self.delco_retail_price_unit_net if hasattr(self, "delco_retail_price_unit_net") else None)!r}, '
                f'delco_retail_value_total_gross={(self.delco_retail_value_total_gross if hasattr(self, "delco_retail_value_total_gross") else None)!r}, '
                f'delco_retail_value_total_net={(self.delco_retail_value_total_net if hasattr(self, "delco_retail_value_total_net") else None)!r}, '
                f'transaction_currency_symbol={(self.transaction_currency_symbol if hasattr(self, "transaction_currency_symbol") else None)!r}, '
                f'discount_type={(self.discount_type if hasattr(self, "discount_type") else None)!r}, '
                f'dispute_status={(self.dispute_status if hasattr(self, "dispute_status") else None)!r}, '
                f'is_shell_site={(self.is_shell_site if hasattr(self, "is_shell_site") else None)!r}, '
                f'fleet_id_input={(self.fleet_id_input if hasattr(self, "fleet_id_input") else None)!r}, '
                f'incoming_product_code={(self.incoming_product_code if hasattr(self, "incoming_product_code") else None)!r}, '
                f'posting_date={(self.posting_date if hasattr(self, "posting_date") else None)!r}, '
                f'posting_time={(self.posting_time if hasattr(self, "posting_time") else None)!r}, '
                f'product_code={(self.product_code if hasattr(self, "product_code") else None)!r}, '
                f'product_name={(self.product_name if hasattr(self, "product_name") else None)!r}, '
                f'product_group_id={(self.product_group_id if hasattr(self, "product_group_id") else None)!r}, '
                f'incoming_currency_code={(self.incoming_currency_code if hasattr(self, "incoming_currency_code") else None)!r}, '
                f'incoming_site_description={(self.incoming_site_description if hasattr(self, "incoming_site_description") else None)!r}, '
                f'location={(self.location if hasattr(self, "location") else None)!r}, '
                f'site_name={(self.site_name if hasattr(self, "site_name") else None)!r}, '
                f'site_code={(self.site_code if hasattr(self, "site_code") else None)!r}, '
                f'incoming_site_number={(self.incoming_site_number if hasattr(self, "incoming_site_number") else None)!r}, '
                f'invoice_currency_code={(self.invoice_currency_code if hasattr(self, "invoice_currency_code") else None)!r}, '
                f'invoice_date={(self.invoice_date if hasattr(self, "invoice_date") else None)!r}, '
                f'invoice_number={(self.invoice_number if hasattr(self, "invoice_number") else None)!r}, '
                f'fuel_product={(self.fuel_product if hasattr(self, "fuel_product") else None)!r}, '
                f'vat_applicable={(self.vat_applicable if hasattr(self, "vat_applicable") else None)!r}, '
                f'payer_name={(self.payer_name if hasattr(self, "payer_name") else None)!r}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!r}, '
                f'parent_customer_number={(self.parent_customer_number if hasattr(self, "parent_customer_number") else None)!r}, '
                f'payer_group={(self.payer_group if hasattr(self, "payer_group") else None)!r}, '
                f'payer_group_name={(self.payer_group_name if hasattr(self, "payer_group_name") else None)!r}, '
                f'check_digit={(self.check_digit if hasattr(self, "check_digit") else None)!r}, '
                f'net_invoice_indicator={(self.net_invoice_indicator if hasattr(self, "net_invoice_indicator") else None)!r}, '
                f'delco_code={(self.delco_code if hasattr(self, "delco_code") else None)!r}, '
                f'network_code={(self.network_code if hasattr(self, "network_code") else None)!r}, '
                f'purchased_in_country={(self.purchased_in_country if hasattr(self, "purchased_in_country") else None)!r}, '
                f'site_country={(self.site_country if hasattr(self, "site_country") else None)!r}, '
                f'vat_country={(self.vat_country if hasattr(self, "vat_country") else None)!r}, '
                f'delco_name={(self.delco_name if hasattr(self, "delco_name") else None)!r}, '
                f'network={(self.network if hasattr(self, "network") else None)!r}, '
                f'odometer_input={(self.odometer_input if hasattr(self, "odometer_input") else None)!r}, '
                f'original_sales_item_id={(self.original_sales_item_id if hasattr(self, "original_sales_item_id") else None)!r}, '
                f'fleet_id_description={(self.fleet_id_description if hasattr(self, "fleet_id_description") else None)!r}, '
                f'parent_customer_id={(self.parent_customer_id if hasattr(self, "parent_customer_id") else None)!r}, '
                f'pin_indicator={(self.pin_indicator if hasattr(self, "pin_indicator") else None)!r}, '
                f'product_group_name={(self.product_group_name if hasattr(self, "product_group_name") else None)!r}, '
                f'purchased_in_country_code={(self.purchased_in_country_code if hasattr(self, "purchased_in_country_code") else None)!r}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!r}, '
                f'rebate_rate={(self.rebate_rate if hasattr(self, "rebate_rate") else None)!r}, '
                f'receipt_number={(self.receipt_number if hasattr(self, "receipt_number") else None)!r}, '
                f'refund_flag={(self.refund_flag if hasattr(self, "refund_flag") else None)!r}, '
                f'site_group_id={(self.site_group_id if hasattr(self, "site_group_id") else None)!r}, '
                f'site_group_name={(self.site_group_name if hasattr(self, "site_group_name") else None)!r}, '
                f'latitude={(self.latitude if hasattr(self, "latitude") else None)!r}, '
                f'longitude={(self.longitude if hasattr(self, "longitude") else None)!r}, '
                f'del_co_exchange_rate={(self.del_co_exchange_rate if hasattr(self, "del_co_exchange_rate") else None)!r}, '
                f'euro_rebate_amount={(self.euro_rebate_amount if hasattr(self, "euro_rebate_amount") else None)!r}, '
                f'net_euro_amount={(self.net_euro_amount if hasattr(self, "net_euro_amount") else None)!r}, '
                f'euro_vat_amount={(self.euro_vat_amount if hasattr(self, "euro_vat_amount") else None)!r}, '
                f'parent_customer_name={(self.parent_customer_name if hasattr(self, "parent_customer_name") else None)!r}, '
                f'is_invoiced={(self.is_invoiced if hasattr(self, "is_invoiced") else None)!r}, '
                f'transaction_currency_code={(self.transaction_currency_code if hasattr(self, "transaction_currency_code") else None)!r}, '
                f'credit_debit_code={(self.credit_debit_code if hasattr(self, "credit_debit_code") else None)!r}, '
                f'transaction_date={(self.transaction_date if hasattr(self, "transaction_date") else None)!r}, '
                f'transaction_time={(self.transaction_time if hasattr(self, "transaction_time") else None)!r}, '
                f'transaction_item_id={(self.transaction_item_id if hasattr(self, "transaction_item_id") else None)!r}, '
                f'trn_identifier={(self.trn_identifier if hasattr(self, "trn_identifier") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'transaction_line={(self.transaction_line if hasattr(self, "transaction_line") else None)!r}, '
                f'transaction_type={(self.transaction_type if hasattr(self, "transaction_type") else None)!r}, '
                f'utc_offset={(self.utc_offset if hasattr(self, "utc_offset") else None)!r}, '
                f'vat_category={(self.vat_category if hasattr(self, "vat_category") else None)!r}, '
                f'vat_rate={(self.vat_rate if hasattr(self, "vat_rate") else None)!r}, '
                f'vehicle_registration={(self.vehicle_registration if hasattr(self, "vehicle_registration") else None)!r}, '
                f'is_cancelled={(self.is_cancelled if hasattr(self, "is_cancelled") else None)!r}, '
                f'col_co_gross_amount={(self.col_co_gross_amount if hasattr(self, "col_co_gross_amount") else None)!r}, '
                f'col_co_net_amount={(self.col_co_net_amount if hasattr(self, "col_co_net_amount") else None)!r}, '
                f'col_co_vat_amount={(self.col_co_vat_amount if hasattr(self, "col_co_vat_amount") else None)!r}, '
                f'original_currency_symbol={(self.original_currency_symbol if hasattr(self, "original_currency_symbol") else None)!r}, '
                f'original_currency_code={(self.original_currency_code if hasattr(self, "original_currency_code") else None)!r}, '
                f'original_vat_amount={(self.original_vat_amount if hasattr(self, "original_vat_amount") else None)!r}, '
                f'emboss_text={(self.emboss_text if hasattr(self, "emboss_text") else None)!r}, '
                f'original_exchange_rate={(self.original_exchange_rate if hasattr(self, "original_exchange_rate") else None)!r}, '
                f'original_transaction_item_invoice_date={(self.original_transaction_item_invoice_date if hasattr(self, "original_transaction_item_invoice_date") else None)!r}, '
                f'fee_type_id={(self.fee_type_id if hasattr(self, "fee_type_id") else None)!r}, '
                f'line_item_description={(self.line_item_description if hasattr(self, "line_item_description") else None)!r}, '
                f'fee_rule_description={(self.fee_rule_description if hasattr(self, "fee_rule_description") else None)!r}, '
                f'frequency={(self.frequency if hasattr(self, "frequency") else None)!r}, '
                f'fee_rule_id={(self.fee_rule_id if hasattr(self, "fee_rule_id") else None)!r}, '
                f'system_entry_date={(self.system_entry_date if hasattr(self, "system_entry_date") else None)!r}, '
                f'system_entry_time={(self.system_entry_time if hasattr(self, "system_entry_time") else None)!r}, '
                f'is_manual={(self.is_manual if hasattr(self, "is_manual") else None)!r}, '
                f'original_transaction_item_id={(self.original_transaction_item_id if hasattr(self, "original_transaction_item_id") else None)!r}, '
                f'original_transaction_item_invoice_number={(self.original_transaction_item_invoice_number if hasattr(self, "original_transaction_item_invoice_number") else None)!r}, '
                f'original_transaction_item_invoice_id={(self.original_transaction_item_invoice_id if hasattr(self, "original_transaction_item_invoice_id") else None)!r}, '
                f'payer_short_name={(self.payer_short_name if hasattr(self, "payer_short_name") else None)!r}, '
                f'reverse_charge={(self.reverse_charge if hasattr(self, "reverse_charge") else None)!r}, '
                f'original_gross_amount={(self.original_gross_amount if hasattr(self, "original_gross_amount") else None)!r}, '
                f'original_net_amount={(self.original_net_amount if hasattr(self, "original_net_amount") else None)!r}, '
                f'unit_of_measure={(self.unit_of_measure if hasattr(self, "unit_of_measure") else None)!r}, '
                f'road_type={(self.road_type if hasattr(self, "road_type") else None)!r}, '
                f'customer_country_iso_code={(self.customer_country_iso_code if hasattr(self, "customer_country_iso_code") else None)!r}, '
                f'ev_operator={(self.ev_operator if hasattr(self, "ev_operator") else None)!r}, '
                f'ev_serial_id={(self.ev_serial_id if hasattr(self, "ev_serial_id") else None)!r}, '
                f'ev_charge_point_serial={(self.ev_charge_point_serial if hasattr(self, "ev_charge_point_serial") else None)!r}, '
                f'ev_charge_point_connector_type={(self.ev_charge_point_connector_type if hasattr(self, "ev_charge_point_connector_type") else None)!r}, '
                f'ev_charge_point_connector_type_description={(self.ev_charge_point_connector_type_description if hasattr(self, "ev_charge_point_connector_type_description") else None)!r}, '
                f'ev_charge_duration={(self.ev_charge_duration if hasattr(self, "ev_charge_duration") else None)!r}, '
                f'ev_charge_start_date={(self.ev_charge_start_date if hasattr(self, "ev_charge_start_date") else None)!r}, '
                f'ev_charge_start_time={(self.ev_charge_start_time if hasattr(self, "ev_charge_start_time") else None)!r}, '
                f'ev_charge_end_date={(self.ev_charge_end_date if hasattr(self, "ev_charge_end_date") else None)!r}, '
                f'ev_charge_end_time={(self.ev_charge_end_time if hasattr(self, "ev_charge_end_time") else None)!r}, '
                f'hosting_collecting_company_number={(self.hosting_collecting_company_number if hasattr(self, "hosting_collecting_company_number") else None)!r}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!r}, '
                f'fuel_only={(self.fuel_only if hasattr(self, "fuel_only") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'account_short_name={(self.account_short_name if hasattr(self, "account_short_name") else None)!s}, '
                f'additional_1={(self.additional_1 if hasattr(self, "additional_1") else None)!s}, '
                f'additional_2={(self.additional_2 if hasattr(self, "additional_2") else None)!s}, '
                f'additional_3={(self.additional_3 if hasattr(self, "additional_3") else None)!s}, '
                f'additional_4={(self.additional_4 if hasattr(self, "additional_4") else None)!s}, '
                f'allow_clearing={(self.allow_clearing if hasattr(self, "allow_clearing") else None)!s}, '
                f'authorisation_code={(self.authorisation_code if hasattr(self, "authorisation_code") else None)!s}, '
                f'transaction_status={(self.transaction_status if hasattr(self, "transaction_status") else None)!s}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!s}, '
                f'card_expiry_period={(self.card_expiry_period if hasattr(self, "card_expiry_period") else None)!s}, '
                f'card_expiry={(self.card_expiry if hasattr(self, "card_expiry") else None)!s}, '
                f'card_group_id={(self.card_group_id if hasattr(self, "card_group_id") else None)!s}, '
                f'card_group_name={(self.card_group_name if hasattr(self, "card_group_name") else None)!s}, '
                f'issuer_code={(self.issuer_code if hasattr(self, "issuer_code") else None)!s}, '
                f'card_pan={(self.card_pan if hasattr(self, "card_pan") else None)!s}, '
                f'release_code={(self.release_code if hasattr(self, "release_code") else None)!s}, '
                f'card_sequence_number={(self.card_sequence_number if hasattr(self, "card_sequence_number") else None)!s}, '
                f'card_type={(self.card_type if hasattr(self, "card_type") else None)!s}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!s}, '
                f'unit_discount_invoice_currency={(self.unit_discount_invoice_currency if hasattr(self, "unit_discount_invoice_currency") else None)!s}, '
                f'col_co_exchange_rate={(self.col_co_exchange_rate if hasattr(self, "col_co_exchange_rate") else None)!s}, '
                f'invoice_currency_symbol={(self.invoice_currency_symbol if hasattr(self, "invoice_currency_symbol") else None)!s}, '
                f'correction_flag={(self.correction_flag if hasattr(self, "correction_flag") else None)!s}, '
                f'crm_number={(self.crm_number if hasattr(self, "crm_number") else None)!s}, '
                f'customer_country={(self.customer_country if hasattr(self, "customer_country") else None)!s}, '
                f'customer_currency_code={(self.customer_currency_code if hasattr(self, "customer_currency_code") else None)!s}, '
                f'customer_currency_symbol={(self.customer_currency_symbol if hasattr(self, "customer_currency_symbol") else None)!s}, '
                f'rebateon_net_amount_in_customer_currency={(self.rebateon_net_amount_in_customer_currency if hasattr(self, "rebateon_net_amount_in_customer_currency") else None)!s}, '
                f'effective_discount_in_customer_currency={(self.effective_discount_in_customer_currency if hasattr(self, "effective_discount_in_customer_currency") else None)!s}, '
                f'effective_unit_discount_in_customer_currency={(self.effective_unit_discount_in_customer_currency if hasattr(self, "effective_unit_discount_in_customer_currency") else None)!s}, '
                f'unit_price_in_invoice_currency={(self.unit_price_in_invoice_currency if hasattr(self, "unit_price_in_invoice_currency") else None)!s}, '
                f'invoice_tax={(self.invoice_tax if hasattr(self, "invoice_tax") else None)!s}, '
                f'invoice_gross_amount={(self.invoice_gross_amount if hasattr(self, "invoice_gross_amount") else None)!s}, '
                f'invoice_net_amount={(self.invoice_net_amount if hasattr(self, "invoice_net_amount") else None)!s}, '
                f'va_ton_net_amount_in_customer_currency={(self.va_ton_net_amount_in_customer_currency if hasattr(self, "va_ton_net_amount_in_customer_currency") else None)!s}, '
                f'customer_retail_price_unit_gross={(self.customer_retail_price_unit_gross if hasattr(self, "customer_retail_price_unit_gross") else None)!s}, '
                f'customer_retail_value_total_gross={(self.customer_retail_value_total_gross if hasattr(self, "customer_retail_value_total_gross") else None)!s}, '
                f'customer_retail_value_total_net={(self.customer_retail_value_total_net if hasattr(self, "customer_retail_value_total_net") else None)!s}, '
                f'transaction_type_description={(self.transaction_type_description if hasattr(self, "transaction_type_description") else None)!s}, '
                f'rebateon_net_amount_in_transaction_currency={(self.rebateon_net_amount_in_transaction_currency if hasattr(self, "rebateon_net_amount_in_transaction_currency") else None)!s}, '
                f'effective_discount_in_trx_currency={(self.effective_discount_in_trx_currency if hasattr(self, "effective_discount_in_trx_currency") else None)!s}, '
                f'del_co_to_col_co_exchange_rate={(self.del_co_to_col_co_exchange_rate if hasattr(self, "del_co_to_col_co_exchange_rate") else None)!s}, '
                f'cards={(self.cards if hasattr(self, "cards") else None)!s}, '
                f'unit_discount_transaction_currency={(self.unit_discount_transaction_currency if hasattr(self, "unit_discount_transaction_currency") else None)!s}, '
                f'transaction_gross_amount={(self.transaction_gross_amount if hasattr(self, "transaction_gross_amount") else None)!s}, '
                f'transaction_net_amount={(self.transaction_net_amount if hasattr(self, "transaction_net_amount") else None)!s}, '
                f'transaction_tax={(self.transaction_tax if hasattr(self, "transaction_tax") else None)!s}, '
                f'va_ton_net_amount={(self.va_ton_net_amount if hasattr(self, "va_ton_net_amount") else None)!s}, '
                f'delco_list_price_unit_net={(self.delco_list_price_unit_net if hasattr(self, "delco_list_price_unit_net") else None)!s}, '
                f'delco_retail_price_unit_gross={(self.delco_retail_price_unit_gross if hasattr(self, "delco_retail_price_unit_gross") else None)!s}, '
                f'unit_price_in_transaction_currency={(self.unit_price_in_transaction_currency if hasattr(self, "unit_price_in_transaction_currency") else None)!s}, '
                f'delco_retail_price_unit_net={(self.delco_retail_price_unit_net if hasattr(self, "delco_retail_price_unit_net") else None)!s}, '
                f'delco_retail_value_total_gross={(self.delco_retail_value_total_gross if hasattr(self, "delco_retail_value_total_gross") else None)!s}, '
                f'delco_retail_value_total_net={(self.delco_retail_value_total_net if hasattr(self, "delco_retail_value_total_net") else None)!s}, '
                f'transaction_currency_symbol={(self.transaction_currency_symbol if hasattr(self, "transaction_currency_symbol") else None)!s}, '
                f'discount_type={(self.discount_type if hasattr(self, "discount_type") else None)!s}, '
                f'dispute_status={(self.dispute_status if hasattr(self, "dispute_status") else None)!s}, '
                f'is_shell_site={(self.is_shell_site if hasattr(self, "is_shell_site") else None)!s}, '
                f'fleet_id_input={(self.fleet_id_input if hasattr(self, "fleet_id_input") else None)!s}, '
                f'incoming_product_code={(self.incoming_product_code if hasattr(self, "incoming_product_code") else None)!s}, '
                f'posting_date={(self.posting_date if hasattr(self, "posting_date") else None)!s}, '
                f'posting_time={(self.posting_time if hasattr(self, "posting_time") else None)!s}, '
                f'product_code={(self.product_code if hasattr(self, "product_code") else None)!s}, '
                f'product_name={(self.product_name if hasattr(self, "product_name") else None)!s}, '
                f'product_group_id={(self.product_group_id if hasattr(self, "product_group_id") else None)!s}, '
                f'incoming_currency_code={(self.incoming_currency_code if hasattr(self, "incoming_currency_code") else None)!s}, '
                f'incoming_site_description={(self.incoming_site_description if hasattr(self, "incoming_site_description") else None)!s}, '
                f'location={(self.location if hasattr(self, "location") else None)!s}, '
                f'site_name={(self.site_name if hasattr(self, "site_name") else None)!s}, '
                f'site_code={(self.site_code if hasattr(self, "site_code") else None)!s}, '
                f'incoming_site_number={(self.incoming_site_number if hasattr(self, "incoming_site_number") else None)!s}, '
                f'invoice_currency_code={(self.invoice_currency_code if hasattr(self, "invoice_currency_code") else None)!s}, '
                f'invoice_date={(self.invoice_date if hasattr(self, "invoice_date") else None)!s}, '
                f'invoice_number={(self.invoice_number if hasattr(self, "invoice_number") else None)!s}, '
                f'fuel_product={(self.fuel_product if hasattr(self, "fuel_product") else None)!s}, '
                f'vat_applicable={(self.vat_applicable if hasattr(self, "vat_applicable") else None)!s}, '
                f'payer_name={(self.payer_name if hasattr(self, "payer_name") else None)!s}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!s}, '
                f'parent_customer_number={(self.parent_customer_number if hasattr(self, "parent_customer_number") else None)!s}, '
                f'payer_group={(self.payer_group if hasattr(self, "payer_group") else None)!s}, '
                f'payer_group_name={(self.payer_group_name if hasattr(self, "payer_group_name") else None)!s}, '
                f'check_digit={(self.check_digit if hasattr(self, "check_digit") else None)!s}, '
                f'net_invoice_indicator={(self.net_invoice_indicator if hasattr(self, "net_invoice_indicator") else None)!s}, '
                f'delco_code={(self.delco_code if hasattr(self, "delco_code") else None)!s}, '
                f'network_code={(self.network_code if hasattr(self, "network_code") else None)!s}, '
                f'purchased_in_country={(self.purchased_in_country if hasattr(self, "purchased_in_country") else None)!s}, '
                f'site_country={(self.site_country if hasattr(self, "site_country") else None)!s}, '
                f'vat_country={(self.vat_country if hasattr(self, "vat_country") else None)!s}, '
                f'delco_name={(self.delco_name if hasattr(self, "delco_name") else None)!s}, '
                f'network={(self.network if hasattr(self, "network") else None)!s}, '
                f'odometer_input={(self.odometer_input if hasattr(self, "odometer_input") else None)!s}, '
                f'original_sales_item_id={(self.original_sales_item_id if hasattr(self, "original_sales_item_id") else None)!s}, '
                f'fleet_id_description={(self.fleet_id_description if hasattr(self, "fleet_id_description") else None)!s}, '
                f'parent_customer_id={(self.parent_customer_id if hasattr(self, "parent_customer_id") else None)!s}, '
                f'pin_indicator={(self.pin_indicator if hasattr(self, "pin_indicator") else None)!s}, '
                f'product_group_name={(self.product_group_name if hasattr(self, "product_group_name") else None)!s}, '
                f'purchased_in_country_code={(self.purchased_in_country_code if hasattr(self, "purchased_in_country_code") else None)!s}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!s}, '
                f'rebate_rate={(self.rebate_rate if hasattr(self, "rebate_rate") else None)!s}, '
                f'receipt_number={(self.receipt_number if hasattr(self, "receipt_number") else None)!s}, '
                f'refund_flag={(self.refund_flag if hasattr(self, "refund_flag") else None)!s}, '
                f'site_group_id={(self.site_group_id if hasattr(self, "site_group_id") else None)!s}, '
                f'site_group_name={(self.site_group_name if hasattr(self, "site_group_name") else None)!s}, '
                f'latitude={(self.latitude if hasattr(self, "latitude") else None)!s}, '
                f'longitude={(self.longitude if hasattr(self, "longitude") else None)!s}, '
                f'del_co_exchange_rate={(self.del_co_exchange_rate if hasattr(self, "del_co_exchange_rate") else None)!s}, '
                f'euro_rebate_amount={(self.euro_rebate_amount if hasattr(self, "euro_rebate_amount") else None)!s}, '
                f'net_euro_amount={(self.net_euro_amount if hasattr(self, "net_euro_amount") else None)!s}, '
                f'euro_vat_amount={(self.euro_vat_amount if hasattr(self, "euro_vat_amount") else None)!s}, '
                f'parent_customer_name={(self.parent_customer_name if hasattr(self, "parent_customer_name") else None)!s}, '
                f'is_invoiced={(self.is_invoiced if hasattr(self, "is_invoiced") else None)!s}, '
                f'transaction_currency_code={(self.transaction_currency_code if hasattr(self, "transaction_currency_code") else None)!s}, '
                f'credit_debit_code={(self.credit_debit_code if hasattr(self, "credit_debit_code") else None)!s}, '
                f'transaction_date={(self.transaction_date if hasattr(self, "transaction_date") else None)!s}, '
                f'transaction_time={(self.transaction_time if hasattr(self, "transaction_time") else None)!s}, '
                f'transaction_item_id={(self.transaction_item_id if hasattr(self, "transaction_item_id") else None)!s}, '
                f'trn_identifier={(self.trn_identifier if hasattr(self, "trn_identifier") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'transaction_line={(self.transaction_line if hasattr(self, "transaction_line") else None)!s}, '
                f'transaction_type={(self.transaction_type if hasattr(self, "transaction_type") else None)!s}, '
                f'utc_offset={(self.utc_offset if hasattr(self, "utc_offset") else None)!s}, '
                f'vat_category={(self.vat_category if hasattr(self, "vat_category") else None)!s}, '
                f'vat_rate={(self.vat_rate if hasattr(self, "vat_rate") else None)!s}, '
                f'vehicle_registration={(self.vehicle_registration if hasattr(self, "vehicle_registration") else None)!s}, '
                f'is_cancelled={(self.is_cancelled if hasattr(self, "is_cancelled") else None)!s}, '
                f'col_co_gross_amount={(self.col_co_gross_amount if hasattr(self, "col_co_gross_amount") else None)!s}, '
                f'col_co_net_amount={(self.col_co_net_amount if hasattr(self, "col_co_net_amount") else None)!s}, '
                f'col_co_vat_amount={(self.col_co_vat_amount if hasattr(self, "col_co_vat_amount") else None)!s}, '
                f'original_currency_symbol={(self.original_currency_symbol if hasattr(self, "original_currency_symbol") else None)!s}, '
                f'original_currency_code={(self.original_currency_code if hasattr(self, "original_currency_code") else None)!s}, '
                f'original_vat_amount={(self.original_vat_amount if hasattr(self, "original_vat_amount") else None)!s}, '
                f'emboss_text={(self.emboss_text if hasattr(self, "emboss_text") else None)!s}, '
                f'original_exchange_rate={(self.original_exchange_rate if hasattr(self, "original_exchange_rate") else None)!s}, '
                f'original_transaction_item_invoice_date={(self.original_transaction_item_invoice_date if hasattr(self, "original_transaction_item_invoice_date") else None)!s}, '
                f'fee_type_id={(self.fee_type_id if hasattr(self, "fee_type_id") else None)!s}, '
                f'line_item_description={(self.line_item_description if hasattr(self, "line_item_description") else None)!s}, '
                f'fee_rule_description={(self.fee_rule_description if hasattr(self, "fee_rule_description") else None)!s}, '
                f'frequency={(self.frequency if hasattr(self, "frequency") else None)!s}, '
                f'fee_rule_id={(self.fee_rule_id if hasattr(self, "fee_rule_id") else None)!s}, '
                f'system_entry_date={(self.system_entry_date if hasattr(self, "system_entry_date") else None)!s}, '
                f'system_entry_time={(self.system_entry_time if hasattr(self, "system_entry_time") else None)!s}, '
                f'is_manual={(self.is_manual if hasattr(self, "is_manual") else None)!s}, '
                f'original_transaction_item_id={(self.original_transaction_item_id if hasattr(self, "original_transaction_item_id") else None)!s}, '
                f'original_transaction_item_invoice_number={(self.original_transaction_item_invoice_number if hasattr(self, "original_transaction_item_invoice_number") else None)!s}, '
                f'original_transaction_item_invoice_id={(self.original_transaction_item_invoice_id if hasattr(self, "original_transaction_item_invoice_id") else None)!s}, '
                f'payer_short_name={(self.payer_short_name if hasattr(self, "payer_short_name") else None)!s}, '
                f'reverse_charge={(self.reverse_charge if hasattr(self, "reverse_charge") else None)!s}, '
                f'original_gross_amount={(self.original_gross_amount if hasattr(self, "original_gross_amount") else None)!s}, '
                f'original_net_amount={(self.original_net_amount if hasattr(self, "original_net_amount") else None)!s}, '
                f'unit_of_measure={(self.unit_of_measure if hasattr(self, "unit_of_measure") else None)!s}, '
                f'road_type={(self.road_type if hasattr(self, "road_type") else None)!s}, '
                f'customer_country_iso_code={(self.customer_country_iso_code if hasattr(self, "customer_country_iso_code") else None)!s}, '
                f'ev_operator={(self.ev_operator if hasattr(self, "ev_operator") else None)!s}, '
                f'ev_serial_id={(self.ev_serial_id if hasattr(self, "ev_serial_id") else None)!s}, '
                f'ev_charge_point_serial={(self.ev_charge_point_serial if hasattr(self, "ev_charge_point_serial") else None)!s}, '
                f'ev_charge_point_connector_type={(self.ev_charge_point_connector_type if hasattr(self, "ev_charge_point_connector_type") else None)!s}, '
                f'ev_charge_point_connector_type_description={(self.ev_charge_point_connector_type_description if hasattr(self, "ev_charge_point_connector_type_description") else None)!s}, '
                f'ev_charge_duration={(self.ev_charge_duration if hasattr(self, "ev_charge_duration") else None)!s}, '
                f'ev_charge_start_date={(self.ev_charge_start_date if hasattr(self, "ev_charge_start_date") else None)!s}, '
                f'ev_charge_start_time={(self.ev_charge_start_time if hasattr(self, "ev_charge_start_time") else None)!s}, '
                f'ev_charge_end_date={(self.ev_charge_end_date if hasattr(self, "ev_charge_end_date") else None)!s}, '
                f'ev_charge_end_time={(self.ev_charge_end_time if hasattr(self, "ev_charge_end_time") else None)!s}, '
                f'hosting_collecting_company_number={(self.hosting_collecting_company_number if hasattr(self, "hosting_collecting_company_number") else None)!s}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!s}, '
                f'fuel_only={(self.fuel_only if hasattr(self, "fuel_only") else None)!s})')
