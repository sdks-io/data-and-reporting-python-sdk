# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.update_odometer_reference import UpdateOdometerReference


class UpdateOdometerResponse(object):

    """Implementation of the 'UpdateOdometerResponse' model.

    Attributes:
        service_reference (int): Main reference number for tracking.
        update_odometer_references (List[UpdateOdometerReference]): The model
            property of type List[UpdateOdometerReference].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "service_reference": 'ServiceReference',
        "update_odometer_references": 'UpdateOdometerReferences'
    }

    _optionals = [
        'service_reference',
        'update_odometer_references',
    ]

    def __init__(self,
                 service_reference=APIHelper.SKIP,
                 update_odometer_references=APIHelper.SKIP):
        """Constructor for the UpdateOdometerResponse class"""

        # Initialize members of the class
        if service_reference is not APIHelper.SKIP:
            self.service_reference = service_reference 
        if update_odometer_references is not APIHelper.SKIP:
            self.update_odometer_references = update_odometer_references 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        service_reference = dictionary.get("ServiceReference") if dictionary.get("ServiceReference") else APIHelper.SKIP
        update_odometer_references = None
        if dictionary.get('UpdateOdometerReferences') is not None:
            update_odometer_references = [UpdateOdometerReference.from_dictionary(x) for x in dictionary.get('UpdateOdometerReferences')]
        else:
            update_odometer_references = APIHelper.SKIP
        # Return an object of this model
        return cls(service_reference,
                   update_odometer_references)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'service_reference={(self.service_reference if hasattr(self, "service_reference") else None)!r}, '
                f'update_odometer_references={(self.update_odometer_references if hasattr(self, "update_odometer_references") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'service_reference={(self.service_reference if hasattr(self, "service_reference") else None)!s}, '
                f'update_odometer_references={(self.update_odometer_references if hasattr(self, "update_odometer_references") else None)!s})')
