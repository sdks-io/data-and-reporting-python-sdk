# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.error_status import ErrorStatus
from shelldatareportingapis.models.price_list import PriceList


class CustomerPriceListResponse(object):

    """Implementation of the 'CustomerPriceListResponse' model.

    TODO: type model description here.

    Attributes:
        request_id (str): UUID (according to RFC 4122 standards) for requests
            and responses. This will be played back in the response from the
            request.
        price_list (List[PriceList]): TODO: type description here.
        error (ErrorStatus): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "price_list": 'PriceList',
        "error": 'Error'
    }

    _optionals = [
        'request_id',
        'price_list',
        'error',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 price_list=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the CustomerPriceListResponse class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if price_list is not APIHelper.SKIP:
            self.price_list = price_list 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        price_list = None
        if dictionary.get('PriceList') is not None:
            price_list = [PriceList.from_dictionary(x) for x in dictionary.get('PriceList')]
        else:
            price_list = APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   price_list,
                   error)
