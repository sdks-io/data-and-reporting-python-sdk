# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.card_exceptions import CardExceptions
from shelldatareportingapis.models.error_status import ErrorStatus
from shelldatareportingapis.models.transaction_exceptions import TransactionExceptions


class TransactionExceptionsResponse(object):

    """Implementation of the 'TransactionExceptionsResponse' model.

    TODO: type model description here.

    Attributes:
        card_exceptions (List[CardExceptions]): TODO: type description here.
        transaction_exceptions (List[TransactionExceptions]): TODO: type
            description here.
        error (ErrorStatus): TODO: type description here.
        request_id (str): API Request Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_exceptions": 'CardExceptions',
        "transaction_exceptions": 'TransactionExceptions',
        "error": 'Error',
        "request_id": 'RequestId'
    }

    _optionals = [
        'card_exceptions',
        'transaction_exceptions',
        'error',
        'request_id',
    ]

    _nullables = [
        'transaction_exceptions',
    ]

    def __init__(self,
                 card_exceptions=APIHelper.SKIP,
                 transaction_exceptions=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 request_id=APIHelper.SKIP):
        """Constructor for the TransactionExceptionsResponse class"""

        # Initialize members of the class
        if card_exceptions is not APIHelper.SKIP:
            self.card_exceptions = card_exceptions 
        if transaction_exceptions is not APIHelper.SKIP:
            self.transaction_exceptions = transaction_exceptions 
        if error is not APIHelper.SKIP:
            self.error = error 
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        card_exceptions = None
        if dictionary.get('CardExceptions') is not None:
            card_exceptions = [CardExceptions.from_dictionary(x) for x in dictionary.get('CardExceptions')]
        else:
            card_exceptions = APIHelper.SKIP
        if 'TransactionExceptions' in dictionary.keys():
            transaction_exceptions = [TransactionExceptions.from_dictionary(x) for x in dictionary.get('TransactionExceptions')] if dictionary.get('TransactionExceptions') else None
        else:
            transaction_exceptions = APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        # Return an object of this model
        return cls(card_exceptions,
                   transaction_exceptions,
                   error,
                   request_id)
