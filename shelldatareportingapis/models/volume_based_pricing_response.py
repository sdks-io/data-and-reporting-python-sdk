# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.bonus_configuration import BonusConfiguration
from shelldatareportingapis.models.pricing_current_volume import PricingCurrentVolume
from shelldatareportingapis.models.pricing_history import PricingHistory
from shelldatareportingapis.models.warning import Warning


class VolumeBasedPricingResponse(object):

    """Implementation of the 'VolumeBasedPricingResponse' model.

    Attributes:
        configuration (List[BonusConfiguration]): The model property of type
            List[BonusConfiguration].
        current_period_consumption (List[PricingCurrentVolume]): The model
            property of type List[PricingCurrentVolume].
        history (List[PricingHistory]): The model property of type
            List[PricingHistory].
        warnings (List[Warning]): A list of Warning entity.   This entity will
            hold the details of the scheduled System Outages of any dependent
            applications of this service.  Note: If there is no scheduled
            outage information available, in the configuration in AMS, for
            this service, this parameter wonâ€™t be present in output.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "configuration": 'Configuration',
        "current_period_consumption": 'CurrentPeriodConsumption',
        "history": 'History',
        "warnings": 'Warnings'
    }

    _optionals = [
        'configuration',
        'current_period_consumption',
        'history',
        'warnings',
    ]

    def __init__(self,
                 configuration=APIHelper.SKIP,
                 current_period_consumption=APIHelper.SKIP,
                 history=APIHelper.SKIP,
                 warnings=APIHelper.SKIP):
        """Constructor for the VolumeBasedPricingResponse class"""

        # Initialize members of the class
        if configuration is not APIHelper.SKIP:
            self.configuration = configuration 
        if current_period_consumption is not APIHelper.SKIP:
            self.current_period_consumption = current_period_consumption 
        if history is not APIHelper.SKIP:
            self.history = history 
        if warnings is not APIHelper.SKIP:
            self.warnings = warnings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        configuration = None
        if dictionary.get('Configuration') is not None:
            configuration = [BonusConfiguration.from_dictionary(x) for x in dictionary.get('Configuration')]
        else:
            configuration = APIHelper.SKIP
        current_period_consumption = None
        if dictionary.get('CurrentPeriodConsumption') is not None:
            current_period_consumption = [PricingCurrentVolume.from_dictionary(x) for x in dictionary.get('CurrentPeriodConsumption')]
        else:
            current_period_consumption = APIHelper.SKIP
        history = None
        if dictionary.get('History') is not None:
            history = [PricingHistory.from_dictionary(x) for x in dictionary.get('History')]
        else:
            history = APIHelper.SKIP
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning.from_dictionary(x) for x in dictionary.get('Warnings')]
        else:
            warnings = APIHelper.SKIP
        # Return an object of this model
        return cls(configuration,
                   current_period_consumption,
                   history,
                   warnings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'configuration={(self.configuration if hasattr(self, "configuration") else None)!r}, '
                f'current_period_consumption={(self.current_period_consumption if hasattr(self, "current_period_consumption") else None)!r}, '
                f'history={(self.history if hasattr(self, "history") else None)!r}, '
                f'warnings={(self.warnings if hasattr(self, "warnings") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'configuration={(self.configuration if hasattr(self, "configuration") else None)!s}, '
                f'current_period_consumption={(self.current_period_consumption if hasattr(self, "current_period_consumption") else None)!s}, '
                f'history={(self.history if hasattr(self, "history") else None)!s}, '
                f'warnings={(self.warnings if hasattr(self, "warnings") else None)!s})')
