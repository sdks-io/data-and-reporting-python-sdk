# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.error_status import ErrorStatus
from shelldatareportingapis.models.fuel_consumption_data import FuelConsumptionData


class FuelConsumptionResponse(object):

    """Implementation of the 'FuelConsumptionResponse' model.

    Attributes:
        fuel_consumption (List[FuelConsumptionData]): The model property of
            type List[FuelConsumptionData].
        error (ErrorStatus): The model property of type ErrorStatus.
        request_id (str): API Request Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fuel_consumption": 'FuelConsumption',
        "error": 'Error',
        "request_id": 'RequestId'
    }

    _optionals = [
        'fuel_consumption',
        'error',
        'request_id',
    ]

    def __init__(self,
                 fuel_consumption=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 request_id=APIHelper.SKIP):
        """Constructor for the FuelConsumptionResponse class"""

        # Initialize members of the class
        if fuel_consumption is not APIHelper.SKIP:
            self.fuel_consumption = fuel_consumption 
        if error is not APIHelper.SKIP:
            self.error = error 
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        fuel_consumption = None
        if dictionary.get('FuelConsumption') is not None:
            fuel_consumption = [FuelConsumptionData.from_dictionary(x) for x in dictionary.get('FuelConsumption')]
        else:
            fuel_consumption = APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        # Return an object of this model
        return cls(fuel_consumption,
                   error,
                   request_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'fuel_consumption={(self.fuel_consumption if hasattr(self, "fuel_consumption") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r}, '
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'fuel_consumption={(self.fuel_consumption if hasattr(self, "fuel_consumption") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s}, '
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!s})')
