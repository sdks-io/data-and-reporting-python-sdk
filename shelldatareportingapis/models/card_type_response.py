# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.card_type_response_customer_card_types_items import CardTypeResponseCustomerCardTypesItems
from shelldatareportingapis.models.card_type_response_error import CardTypeResponseError


class CardTypeResponse(object):

    """Implementation of the 'CardTypeResponse' model.

    TODO: type model description here.

    Attributes:
        customer_card_types (List[CardTypeResponseCustomerCardTypesItems]):
            TODO: type description here.
        error (CardTypeResponseError): TODO: type description here.
        request_id (str): API Request Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_card_types": 'CustomerCardTypes',
        "error": 'Error',
        "request_id": 'RequestId'
    }

    _optionals = [
        'customer_card_types',
        'error',
        'request_id',
    ]

    def __init__(self,
                 customer_card_types=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 request_id=APIHelper.SKIP):
        """Constructor for the CardTypeResponse class"""

        # Initialize members of the class
        if customer_card_types is not APIHelper.SKIP:
            self.customer_card_types = customer_card_types 
        if error is not APIHelper.SKIP:
            self.error = error 
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        customer_card_types = None
        if dictionary.get('CustomerCardTypes') is not None:
            customer_card_types = [CardTypeResponseCustomerCardTypesItems.from_dictionary(x) for x in dictionary.get('CustomerCardTypes')]
        else:
            customer_card_types = APIHelper.SKIP
        error = CardTypeResponseError.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_card_types,
                   error,
                   request_id)
