# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.usage_summary import UsageSummary


class CardUsageSummaryResponse(object):

    """Implementation of the 'CardUsageSummaryResponse' model.

    Attributes:
        usage_summary (List[UsageSummary]): The model property of type
            List[UsageSummary].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "usage_summary": 'UsageSummary'
    }

    _optionals = [
        'usage_summary',
    ]

    def __init__(self,
                 usage_summary=APIHelper.SKIP):
        """Constructor for the CardUsageSummaryResponse class"""

        # Initialize members of the class
        if usage_summary is not APIHelper.SKIP:
            self.usage_summary = usage_summary 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        usage_summary = None
        if dictionary.get('UsageSummary') is not None:
            usage_summary = [UsageSummary.from_dictionary(x) for x in dictionary.get('UsageSummary')]
        else:
            usage_summary = APIHelper.SKIP
        # Return an object of this model
        return cls(usage_summary)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'usage_summary={(self.usage_summary if hasattr(self, "usage_summary") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'usage_summary={(self.usage_summary if hasattr(self, "usage_summary") else None)!s})')
