# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.transaction_exceptions_response import TransactionExceptionsResponse
from shelldatareportingapis.models.warning import Warning


class TransactionExceptionsRes(object):

    """Implementation of the 'TransactionExceptionsRes' model.

    Attributes:
        request_id (str): Unique identifier for the request. This will be
            played back in the response from the request.
        status (str): Status of the request
        data (List[TransactionExceptionsResponse]): The model property of type
            List[TransactionExceptionsResponse].
        warnings (List[Warning]): A list of Warning entity.   This entity will
            hold the details of the scheduled System Outages of any dependent
            applications of this service.  Note: If there is no scheduled
            outage information available, in the configuration in AMS, for
            this service, this parameter wonâ€™t be present in output.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "status": 'Status',
        "data": 'Data',
        "warnings": 'Warnings'
    }

    _optionals = [
        'request_id',
        'status',
        'data',
        'warnings',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 warnings=APIHelper.SKIP):
        """Constructor for the TransactionExceptionsRes class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if data is not APIHelper.SKIP:
            self.data = data 
        if warnings is not APIHelper.SKIP:
            self.warnings = warnings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        status = dictionary.get("Status") if dictionary.get("Status") else APIHelper.SKIP
        data = None
        if dictionary.get('Data') is not None:
            data = [TransactionExceptionsResponse.from_dictionary(x) for x in dictionary.get('Data')]
        else:
            data = APIHelper.SKIP
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning.from_dictionary(x) for x in dictionary.get('Warnings')]
        else:
            warnings = APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   status,
                   data,
                   warnings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r}, '
                f'warnings={(self.warnings if hasattr(self, "warnings") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s}, '
                f'warnings={(self.warnings if hasattr(self, "warnings") else None)!s})')
