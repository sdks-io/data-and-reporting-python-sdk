# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.multi_priced_transaction_response_transactions_items import MultiPricedTransactionResponseTransactionsItems


class MultiPricedTransactionResponse(object):

    """Implementation of the 'MultiPricedTransactionResponse' model.

    Attributes:
        transactions (List[MultiPricedTransactionResponseTransactionsItems]):
            The model property of type
            List[MultiPricedTransactionResponseTransactionsItems].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transactions": 'Transactions'
    }

    _optionals = [
        'transactions',
    ]

    def __init__(self,
                 transactions=APIHelper.SKIP):
        """Constructor for the MultiPricedTransactionResponse class"""

        # Initialize members of the class
        if transactions is not APIHelper.SKIP:
            self.transactions = transactions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        transactions = None
        if dictionary.get('Transactions') is not None:
            transactions = [MultiPricedTransactionResponseTransactionsItems.from_dictionary(x) for x in dictionary.get('Transactions')]
        else:
            transactions = APIHelper.SKIP
        # Return an object of this model
        return cls(transactions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'transactions={(self.transactions if hasattr(self, "transactions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'transactions={(self.transactions if hasattr(self, "transactions") else None)!s})')
