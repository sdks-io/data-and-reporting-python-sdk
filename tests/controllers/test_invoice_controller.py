# -*- coding: utf-8 -*-

"""
shelldatareportingapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from apimatic_core.utilities.file_helper import FileHelper
from shelldatareportingapis.api_helper import APIHelper
from shelldatareportingapis.models.invoice_search_request import InvoiceSearchRequest
from shelldatareportingapis.models.invoice_summary_request import InvoiceSummaryRequest
from shelldatareportingapis.models.statement_of_account_request import StatementOfAccountRequest
from shelldatareportingapis.models.invoice_dates_request import InvoiceDatesRequest
from shelldatareportingapis.models.search_statement_of_account_request import SearchStatementOfAccountRequest
from shelldatareportingapis.models.search_documents_request import SearchDocumentsRequest
from shelldatareportingapis.models.eid_search_request import EIDSearchRequest
from shelldatareportingapis.models.invoice_download_request import InvoiceDownloadRequest
from shelldatareportingapis.models.eid_download_request import EIDDownloadRequest


class InvoiceControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(InvoiceControllerTests, cls).setUpClass()
        cls.controller = cls.client.invoice
        cls.response_catcher = cls.controller.http_call_back

    # This API allows to search invoice data in the Shell Card Platform. It provides flexible search criteria in the request body and supports paging. 
    #
    #This API will also query the relevant invoice documents list and return a reference number that can be used to download invoice documents (PDF and Proofing elements in a zip file).
    #
    ##### Supported operations
    #  * Search invoices by account
    #  * Search invoices by invoice type or invoice status
    #  * Search invoices by invoice id or number
    #  * Search invoices by invoiced country
    #  * Search invoices including einvoices
    #  * Search invoices by summary document
    #  * Search invoices by statement of account
    #  * Search invoices by fixed and custom date periods
    def test_invoice_search(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoId":14,"PayerId":78,"PayerNumber":"DE26688478","'
            'AccountId":92,"AccountNumber":"DE26702892","InvoiceId":4013059,"In'
            'voiceNumber":"0123456789","FromDate":"20170830","ToDate":"20171031'
            '","InvoiceDate":"20171031","Type":"Original","SummaryDocumentId":1'
            '616729,"SummaryDocumentNumber":"1283899/289261063/2019","Statement'
            'OfAccountId":"DE26702892","SoAReferenceNumber":"1283899","Period":'
            '1,"InvoiceStatus":"Due","InvoicedOnBehalfOf":"DE","IncludeEInvoice'
            'Details":false,"SortBy":[1]},"PageSize":50,"Page":1}', InvoiceSearchRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.invoice_search(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"18c955d1-b3ec-4dc0-95da-76e67afb891a","Status":"SUCC'
            'ESS","Data":[{"AccountFullName":"powder ambition ERF  ","AccountId'
            '":179827,"AccountNumber":"DE26702892","AccountShortName":"soft gro'
            'cery Argyle  ","ColCoId":14,"ColCoOpCoId":"014","CurrentBillingFre'
            'quency":"Last day of month","CurrentBillingFrequencyId":40,"Curren'
            'tDistributionMethod":"e-mail","CurrentDistributionMethodId":1,"Cus'
            'tomerCurrencyCode":"EUR","CustomerCurrencySymbol":"€","DelCoClient'
            'Number":"014","DelCoId":14,"DelCoOpCoId":"014","DocumentType":"Inv'
            'oice","DocumentTypeId":1,"DueDate":"20190707","GrossAmountCustomer'
            'Currency":22.85,"GrossAmountTransactionCurrency":22.85,"InvoiceDat'
            'e":"20190630","InvoicedBy":"euroShell Deutschland GmbH & Co. KG","'
            'InvoicedOnBehalfOf":"Germany","InvoiceId":4013059,"InvoiceNumber":'
            '"6402009004","IsInternational":false,"IsNational":true,"NetAmountC'
            'ustomerCurrency":19.2,"NetAmountTransactionCurrency":19.2,"PayerId'
            '":164825,"PayerNumber":"DE26688478","PaymentTerms":"7 days after i'
            'nvoice","PaymentTermsId":9,"ReplacementInvoiceId":null,"ReversalIn'
            'voiceId":null,"Status":"Paid","SummaryDocumentBillingType":"Standa'
            'rd Invoice","SummaryDocumentBillingTypeId":0,"SummaryDocumentDate"'
            ':"20190630","SummaryDocumentDDAmount":22.85,"SummaryDocumentDueDat'
            'e":"20190707","SummaryDocumentId":1616729,"SummaryDocumentIsFullyP'
            'aid":true,"SummaryDocumentNumber":"1283899/289261063/2019","Summar'
            'yDocumentPaidAmount":22.85,"SummaryDocumentSoAReferenceNumber":"20'
            '00745709","SummaryDocumentStatementOfAccountId":2000745709,"Transa'
            'ctionCurrencyCode":"EUR","TransactionCurrencySymbol":"€","Type":"O'
            'riginal","TypeId":1,"VATAmountCustomerCurrency":3.65,"VATAmountTra'
            'nsactionCurrency":3.65,"VATCountry":"Germany","VATCountryId":9,"VA'
            'TCountryISOCode":"DE","VATCountryOpCoId":"014"}],"Page":1,"PageSiz'
            'e":50,"TotalRecords":1,"TotalPages":1}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This API returns the high level summary of invoices that match the  given search criteria. The same search criteria as the endpoint `/v1/invoice/search` is supported with the exception of paging related parameters. 
    #
    #
    ##### Supported operations
    #  * Search invoices by account
    #  * Search invoices by invoice type or invoice status
    #  * Search invoices by invoice id or number
    #  * Search invoices by invoiced country
    #  * Search invoices including einvoices
    #  * Search invoices by summary document
    #  * Search invoices by statement of account
    #  * Search invoices by fixed and custom date periods
    def test_invoice_summary(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoId":14,"PayerId":78,"PayerNumber":"DE26688478","'
            'AccountId":92,"AccountNumber":"DE26702892","InvoiceId":4013059,"In'
            'voiceNumber":"0123456789","FromDate":"20170830","ToDate":"20171031'
            '","InvoiceDate":"20171031","Type":"Original","SummaryDocumentId":1'
            '616729,"SummaryDocumentNumber":"1283899/289261063/2019","Statement'
            'OfAccountId":"DE26702892","SoAReferenceNumber":"1283899","Period":'
            '1,"InvoiceStatus":"Due","InvoicedOnBehalfOf":"DE","IncludeEInvoice'
            'Details":false}}', InvoiceSummaryRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.invoice_summary(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCC'
            'ESS","Data":[{"TotalInvoices":1,"TotalGrossAmountCustomerCurrency"'
            ':22.85,"TotalNetAmountCustomerCurrency":19.2,"TotalVATAmountCustom'
            'erCurrency":3.65,"CustomerCurrencyCode":"EUR","CustomerCurrencySym'
            'bol":"€"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This API allows querying the details of the latest statement of account (SOA) generated for a given Payer. 
    #
    #The endpoint supports querying SOA documents by various input parameters specified in the request body.
    #
    ##### Supported operations
    #  * Search invoice SOA by payer and account
    #  * Search invoice SOA including monthly trend (last 13 months invocie trend summary)
    #  * Search invoice SOA including past SOAs
    #  * Search invoice SOA including due/overdue documents
    #  * Search invoice SOA including invoice summary
    def test_statement_of_account(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":32,"PayerId":308,"PayerNumber":"CZ56891709'
            '","AccountNumber":"CZ56891900","Accountid":6928,"IncludeMonthlyInv'
            'oiceTrend":true,"IncludePastStatementOfAccounts":true,"DueOrOverDu'
            'eSOADocumentsOnly":false,"NumberOfSOADocuments":10,"IncludeAccount'
            'InvoicesSummary":true}}', StatementOfAccountRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.statement_of_account(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"5acba53b-3ce7-4f4b-ab59-1db09399aa6a","Status":"SUCC'
            'ESS","Data":[{"LastStatementOfAccount":{"AmountDue":123699.71,"Amo'
            'untNotOverdue":136604.83,"AmountOverdue":926469.11,"CreditLimit":7'
            '000000,"CreditLimitCurrencyCode":"CZK","CreditLimitCurrencySymbol"'
            ':"Kč","CreditLimitInCustomerCurrency":286826.469986,"CurrencyCode"'
            ':"EUR","CurrencySymbol":"€","LastPaymentCurrencyCode":"EUR","LastP'
            'aymentCurrencySymbol":"€","LastPaymentDate":"20220209","LastPaymen'
            'tValue":17918.98,"OutstandingBalance":1186773.65,"PayerId":308,"Pa'
            'yerNumber":"CZ56891709","PaymentDueDate":"20230608","PaymentMethod'
            '":"Incoming - Bank Transfer","PaymentMethodId":4,"PaymentTerms":"3'
            '0 days after Invoice","PaymentTermsId":4,"SoAReferenceNumber":"200'
            '3923319","StatementDate":"20230509","StatementOfAccountId":2003923'
            '319,"TotalBillingDocuments":6,"TotalSummaryBillingDocuments":1,"Un'
            'allocatedPayment":0},"MonthlyInvoiceTrend":null,"PastStatementOfAc'
            'counts":[{"AmountDue":136604.83,"AmountNotOverdue":130344.09,"Amou'
            'ntOverdue":796109.41,"AmountOverdueFromUnallocated":0,"AmountPaid"'
            ':0,"BalanceOnThisStatement":5866.1,"BillingCurrencyCode":"EUR","Bi'
            'llingCurrencySymbol":"€","CreditLimit":7000000,"CreditLimitCurrenc'
            'yCode":"CZK","CreditLimitCurrencySymbol":"Kč","CreditLimitInCustom'
            'erCurrency":286826.4699857,"CurrencyCode":"EUR","CurrencySymbol":"'
            '€","FullyPaid":false,"LastPaymentCurrencyCode":"EUR","LastPaymentC'
            'urrencySymbol":"€","LastPaymentDate":"20220209","LastPaymentValue"'
            ':17918.98,"OutstandingBalance":1063058.33,"PayerId":308,"PayerNumb'
            'er":"CZ56891709","PaymentDueDate":"20230511","SoAReferenceNumber":'
            '"2003920583","StatementDate":"20230411","StatementOfAccountId":200'
            '3920583,"TotalBillingDocuments":3,"TotalNetAmountBillingCurrency":'
            '4847.94,"TotalSummaryBillingDocuments":1,"TotalVATAmountBillingCur'
            'rency":1018.16,"UnallocatedPayment":0,"LocalCurrencyCode":"EUR","L'
            'ocalCurrencySymbol":"€","LocalCurrencyExchangeRate":24.405}],"Paym'
            'entsSinceLastSOA":null,"InvoicesSummaries":null}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # - This API will return the list of Invoice Dates and Numbers for the given date range. If the dates are not provided then it will fetch the data for past 13 months.
    def test_dates(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":0,"PayerId":0,"PayerNumber":"string","Incl'
            'udeMonthlyInvoiceTrend":true,"IncludePastStatementOfAccounts":true'
            ',"DueOrOverDueSOADocumentsOnly":true,"NumberOfSOADocuments":0,"Inc'
            'ludeAccountInvoicesSummary":true,"ColCoId":0,"Accounts":[{"Account'
            'Id":3453,"AccountNumber":"GB000000124"}]}}', InvoiceDatesRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.dates(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCC'
            'ESS","Data":[{"InvoiceNumbers":["6402009004"],"InvoiceDates":["201'
            '70101"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # - This API will allow querying of SOA from different systems
    def test_search_statement_of_account(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":18,"PayerNumber":"NL99781417","InvoiceNumb'
            'er":"0123456789","FromDate":"2022/05/04","ToDate":"2022/05/10","Pe'
            'riod":1,"InvoiceDate":"20170830","InvoiceStatus":["Due"],"SortBy":'
            '[1]},"Page":1,"PageSize":10}', SearchStatementOfAccountRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.search_statement_of_account(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCC'
            'ESS","Data":[{"StatementOfAccountId":2001581712,"SoAReferenceNumbe'
            'r":"2001581712","DocumentReferenceNumber":null,"StatementDate":"20'
            '220505","PayerId":17150,"PayerNumber":"NL99781417","AmountDue":0,"'
            'AmountOverdue":197046.47,"CurrencyCode":"EUR","CurrencySymbol":"€"'
            ',"DueDate":"20220604","InvoicedOnBehalfOf":"Netherlands","Status":'
            '"OverDue","GrossAmountCustomerCurrency":0}],"Page":1,"TotalRecords'
            '":62,"TotalPages":7,"PageSize":10}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # - This API allows querying the details of all invoices successfully uploaded to the Worldline invoice repository and file reference numbers for downloading.
    def test_search_documents(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"PayerNumber":"DE00000096","AccountNumber":"DE00000096'
            '","ColCoCode":14,"AccountNumberList":["DE00000123","DE00000225"],"'
            'InvoiceNumber":"1234567","InvoiceNumberList":["6400013693","942100'
            '0010"],"InvoiceStatus":"NEW","IssuingDateFrom":"2023/05/01","Issui'
            'ngDateTo":"2023/06/30","DueDateFrom":"2023/05/04","DueDateTo":"202'
            '3/06/30","GrossAmount":"1000","GrossAmountOperator":"LT","Document'
            'Type":"SOA","VATIssuerCountry":"DE","SortyBy":["InvoiceNumber ASC"'
            ',"InvoiceDate DESC"]},"Page":"1","PageSize":"50"}', SearchDocumentsRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.search_documents(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"a8b81c1d-f44a-4365-8113-8958061c0b7e","Status":"SUCC'
            'ESS","Data":[{"DocumentReference":311161,"InvoiceNumber":"64000136'
            '93","PayerName":"DE00000096","AccountNumber":"DE00000096","Account'
            'Name":"DE00000096","DocumentType":"NAT","GrossAmount":-3141.93,"Ne'
            'tAmount":0,"TaxAmount":0,"CurrencyCode":"EUR","InvoiceStatus":"NEW'
            '","InvoiceDate":"2023/01/31","DueDate":"2023/02/07","VATCountryISO'
            'Code":"DE"}],"TotalRecords":2,"TotalRecordsOnPage":2,"IsFirstPage"'
            ':true,"IsLastPage":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # - This API provides the functionality needed for the screen “EID FILES” in the web interface. It allows retrieving a list of EIDs based on search criteria.
    def test_eid_search(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":32,"AccountGroupCountry":32,"AccountGroupI'
            'd":["122"],"AccountGroupName":null,"FromDate":"2017/08/30","ToDate'
            '":"2017/10/31","InvoiceType":"NAT","InvoiceStatus":"NEW","SortBy":'
            '["DocumentDate ASC"]},"Page":1,"PageSize":10}', EIDSearchRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.eid_search(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCC'
            'ESS","Data":[{"DocumentId":15029,"AccountGroupId":"122","AccountGr'
            'oupName":"EID-122","DocumentType":"INT","DocumentFormat":"FLAT","D'
            'ocumentDate":"2022/12/28","NumberOfInvoices":1,"FileSize":1624,"Do'
            'cumentStatus":"DOWNLOADED","DocumentName":"032_122_INT_28122022.TX'
            'T"}],"PageSize":1,"Page":1,"TotalPages":12,"TotalRecords":120,"IsF'
            'irstPage":true,"IsLastPage":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # - This API downloads Invoice Documents i.e., ZIP file with Invoice PDF file and Proofing Elements in XML format from invoice repository.
    def test_download(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":18,"PayerNumber":"NL99781417","AccountNumb'
            'er":["NL99781420"],"DocumentReference":[1234567890],"InvoiceOrSOAN'
            'umber":"2234556"}}', InvoiceDownloadRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.download(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/octet-stream'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # - This service allows downloading one or more EID documents and the corresponding signature material (where applicable) in one single request 
    #- The number of EID that can be downloaded at once is limited to 100 documents.
    #
    def test_eid_download(self):
        # Parameters for the API call
        request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
        body = APIHelper.json_deserialize('{"Filters":{"ColCoCode":18,"EIDList":["1710187","1734566"],"Accoun'
            'tGroupCountry":18,"AccountGroupIdList":["26685402"]}}', EIDDownloadRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.eid_download(request_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/octet-stream'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


